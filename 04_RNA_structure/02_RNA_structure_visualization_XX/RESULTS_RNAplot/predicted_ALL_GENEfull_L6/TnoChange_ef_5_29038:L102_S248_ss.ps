%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CTCACATATTCCTTAGATTTGAAACTCTGCATCAACTTGATAACTTGCAGATTTGGAACACTCTCAATCAAAGGATGTTGTGGTAAGTTGAAATCCTTTTTA\
) def
/coor [
[-6.00435305 106.23018646]
[-13.43822002 119.25852203]
[-4.73383379 131.79632568]
[-2.33988023 146.87052917]
[-6.73167992 161.48815918]
[-17.03723907 172.74685669]
[-31.21037865 178.41119385]
[-46.43701553 177.35653687]
[-59.69388580 169.79226685]
[-68.34883118 157.22029114]
[-70.68340302 142.13676453]
[-66.23407745 127.53656006]
[-55.88426208 116.31853485]
[-41.68892288 110.71004486]
[-26.46656036 111.82466125]
[-19.03269196 98.79631805]
[-33.34362411 103.29045105]
[-48.18572998 105.46115112]
[-63.18429184 105.25361633]
[-77.96065521 102.67308807]
[-92.14176178 97.78471375]
[-105.36959076 90.71190643]
[-117.31018066 81.63323975]
[-127.66207886 70.77790070]
[-136.16392517 58.41996765]
[-142.60108948 44.87142944]
[-146.81105042 30.47433853]
[-148.68751526 15.59217167]
[-148.18312073 0.60065490]
[-145.31059265 -14.12172890]
[-140.14245605 -28.20328903]
[-132.80918884 -41.28851700]
[-123.49591827 -53.04705048]
[-112.43779755 -63.18202972]
[-99.91398621 -71.43758392]
[-86.24066925 -77.60528564]
[-71.76306152 -81.52942657]
[-56.84666824 -83.11092377]
[-41.86807251 -82.30986023]
[-27.20543861 -79.14646149]
[-13.22894287 -73.70058441]
[-0.29144588 -66.10971832]
[11.28042412 -56.56551743]
[21.19451904 -45.30892944]
[29.20054054 -32.62415314]
[35.09636307 -18.83142662]
[38.73313904 -4.27897501]
[40.01905441 10.66580391]
[38.92163849 25.62560654]
[35.46860123 40.22274780]
[29.74712181 54.08869934]
[21.90164375 66.87339783]
[12.13023949 78.25406647]
[0.67759192 87.94483948]
[15.66189575 88.63086700]
[30.64620018 89.31689453]
[45.63050461 90.00292969]
[60.61480713 90.68895721]
[67.14021301 76.37536621]
[78.63023376 65.63108826]
[93.34889984 60.07943344]
[109.07244110 60.55916214]
[123.42527771 66.99780273]
[134.23892212 78.42256927]
[139.87957764 93.10735321]
[154.87782288 93.33610535]
[169.87608337 93.56484985]
[184.87434387 93.79360199]
[174.30061340 83.15422058]
[170.94660950 68.53401184]
[175.82553101 54.34965134]
[187.46351624 44.88616562]
[202.34475708 43.00242615]
[215.97373962 49.26749420]
[224.23318481 61.78873062]
[224.62799072 76.78353119]
[217.03887939 89.72205353]
[203.75730896 96.69586945]
[218.13200378 100.98168182]
[232.50669861 105.26750183]
[249.41310120 103.99878693]
[255.31239319 119.89327240]
[241.67216492 129.96205139]
[228.22088623 119.64218903]
[213.84619141 115.35637665]
[199.47149658 111.07056427]
[184.64559937 108.79185486]
[169.64733887 108.56311035]
[154.64907837 108.33435822]
[139.65081787 108.10561371]
[134.46936035 121.20735931]
[125.11038971 131.73889160]
[112.70817566 138.42384338]
[98.76579285 140.45201111]
[84.97299194 137.57762146]
[73.00138855 130.14903259]
[64.30187225 119.06652832]
[59.92877579 105.67326355]
[44.94447327 104.98723602]
[29.96016884 104.30120087]
[14.97586536 103.61517334]
[-0.00843893 102.92913818]
] def
/pairs [
[1 16]
[2 15]
[54 102]
[55 101]
[56 100]
[57 99]
[58 98]
[65 90]
[66 89]
[67 88]
[68 87]
[78 86]
[79 85]
[80 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

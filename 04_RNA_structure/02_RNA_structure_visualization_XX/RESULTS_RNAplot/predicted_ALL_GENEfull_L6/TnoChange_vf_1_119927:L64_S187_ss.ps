%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAGCGAATGCGCAACAACCGAAGCTGTTTGTGGGAATGATTCTGATTCTCATCTTTGCGGAAGC\
) def
/coor [
[38.24676514 153.52969360]
[36.39483643 169.24214172]
[22.65432549 174.99084473]
[13.83754730 187.12609863]
[12.66242409 203.48309326]
[-2.20684910 210.39950562]
[-15.47403812 200.76033020]
[-13.49099636 184.48152161]
[1.70229220 178.30932617]
[10.51907063 166.17405701]
[11.74036598 151.32962036]
[26.11151123 144.71290588]
[22.82235909 138.89224243]
[21.20134544 132.37796021]
[21.38044357 125.64015961]
[23.36117744 119.16910553]
[27.01345634 113.43951416]
[32.08401489 108.87577820]
[38.21393585 105.82051849]
[44.96405029 104.50888824]
[51.84637070 105.05051422]
[58.35940170 107.42053986]
[64.02464294 111.46032715]
[77.13416290 104.17057800]
[90.24368286 96.88082886]
[95.42169952 90.28932190]
[104.16740417 89.57309723]
[117.61380768 82.92522430]
[126.55554199 69.87317657]
[141.39372253 71.16848755]
[154.84011841 64.52061462]
[159.99179077 49.82033539]
[173.72305298 43.26999283]
[187.70576477 48.27190781]
[196.64750671 35.21986389]
[211.48568726 36.51516724]
[224.93209839 29.86729431]
[238.37849426 23.21942139]
[251.82490540 16.57154846]
[253.44758606 1.22976124]
[263.12487793 -10.78495884]
[277.76879883 -15.63875771]
[292.70651245 -11.78280640]
[303.17144775 -0.44752488]
[305.82427979 14.75004005]
[299.81851196 28.96039963]
[287.07055664 37.64908218]
[271.64825439 38.04355621]
[258.47277832 30.01795197]
[245.02636719 36.66582489]
[231.57997131 43.31369781]
[218.13356018 49.96157074]
[210.15359497 62.53811646]
[194.35363770 61.71831131]
[189.83827209 75.86563873]
[176.29640198 82.79907990]
[161.48799133 77.96701813]
[148.04159546 84.61489105]
[140.06163025 97.19142914]
[124.26168060 96.37162781]
[110.81527710 103.01950073]
[97.53343201 109.99034882]
[84.42391205 117.28009796]
[71.31439209 124.56984711]
] def
/pairs [
[1 12]
[3 10]
[4 9]
[23 64]
[24 63]
[25 62]
[27 61]
[28 60]
[30 58]
[31 57]
[34 54]
[36 52]
[37 51]
[38 50]
[39 49]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAAACCACCGTGGTTTGAGGCATTACTGGGGTCTCCGTGTCAGAGGACAACACACCAAGACTACTGGTCGCAGAGGAAAGACTGTTGGTGTCTC\
) def
/coor [
[89.90144348 213.37818909]
[89.90144348 198.37818909]
[79.52989960 190.54017639]
[75.56669617 177.95343018]
[79.69716644 165.21458435]
[90.60646057 157.11465454]
[91.10240936 142.12284851]
[91.59836578 127.13105011]
[92.09431458 112.13925171]
[87.22382355 97.95199585]
[77.62429047 86.42597961]
[68.02476501 74.89996338]
[58.42523575 63.37394333]
[48.82571030 51.84792709]
[39.22618103 40.32191086]
[29.62665176 28.79589272]
[25.86158943 33.56528854]
[20.13973618 37.25200272]
[12.80593300 39.22462082]
[2.78417182 51.44509125]
[-12.95145893 52.91664505]
[-25.06528854 42.76624298]
[-26.37039566 27.01593399]
[-16.09248543 15.01009846]
[-0.32925755 13.87158489]
[11.56724262 24.27585411]
[19.56271935 11.58442593]
[14.22581100 -2.43404126]
[8.88890362 -16.45250893]
[-7.31041765 -28.22411346]
[-3.91067815 -47.13823700]
[-10.16240597 -60.77333450]
[-26.59868813 -66.47673798]
[-33.77455521 -81.95703888]
[-27.74611092 -97.56049347]
[-34.44524384 -110.98143768]
[-49.77227402 -113.40253448]
[-60.72519302 -124.39404297]
[-63.09238052 -139.72949219]
[-55.96360016 -153.51210022]
[-42.08001709 -160.44215393]
[-26.78015327 -157.85493469]
[-15.94711494 -146.74525452]
[-13.74642944 -131.38502502]
[-21.02430344 -117.68056488]
[-14.32517147 -104.25962830]
[-1.54491448 -101.87875366]
[7.62242317 -92.38702393]
[9.61605740 -79.14450073]
[3.47269177 -67.02506256]
[9.72441959 -53.38996506]
[19.80949783 -50.61261749]
[26.76329422 -42.50320816]
[28.02132988 -31.67133713]
[22.90736961 -21.78941536]
[28.24427795 -7.77094889]
[33.58118439 6.24751806]
[41.15266800 19.19636536]
[50.75219727 30.72238159]
[60.35172653 42.24839783]
[69.95125580 53.77441406]
[79.55078125 65.30043030]
[89.15030670 76.82644653]
[98.74983978 88.35246277]
[95.85132599 73.63517761]
[96.94882965 58.67538071]
[104.79125214 45.88880539]
[117.62827301 38.12923431]
[132.59484863 37.12848663]
[146.35066223 43.10991669]
[155.82562256 54.73855209]
[158.90504456 69.41905975]
[154.90077209 83.87651062]
[139.90393066 84.18389130]
[153.21226501 91.10401154]
[168.20552063 86.10624695]
[182.30375671 93.24876404]
[187.14273071 108.29402161]
[179.85154724 122.31594849]
[164.75596619 126.99558258]
[150.81192017 119.55657196]
[146.29214478 104.41235352]
[132.98381042 97.49223328]
[126.50938416 101.27797699]
[126.59208679 116.27774811]
[113.56053925 108.84946442]
[107.08611298 112.63520050]
[106.59016418 127.62699890]
[106.09420776 142.61880493]
[105.59825897 157.61059570]
[117.75709534 170.05418396]
[117.26391602 187.10968018]
[104.90144348 198.37818909]
[104.90144348 213.37818909]
] def
/pairs [
[1 94]
[2 93]
[6 90]
[7 89]
[8 88]
[9 87]
[10 64]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[16 58]
[19 26]
[27 57]
[28 56]
[29 55]
[31 51]
[32 50]
[35 46]
[36 45]
[74 83]
[75 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

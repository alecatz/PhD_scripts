%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGGTCATCACACAGCAGGAGCATTGTCTATAACCGTGGCTGTCCAAACAATTTCCTGGAAGTTTT\
) def
/coor [
[92.50000000 149.00474548]
[92.50000000 134.00474548]
[92.50000000 119.00474548]
[85.94583130 105.51242065]
[73.93771362 96.52325439]
[61.71907425 87.82240295]
[49.50043488 79.12154388]
[37.28179550 70.42069244]
[14.26776314 75.54482269]
[-3.99286222 55.20955276]
[-10.30794239 69.28517914]
[-23.24285316 77.69301605]
[-38.67011261 77.75013733]
[-51.66693497 69.43833160]
[-58.08608246 55.40985870]
[-55.87923050 40.14115524]
[-45.75057983 28.50440598]
[-30.93213844 24.21285820]
[-16.15242195 28.63592911]
[-6.12758493 40.36223221]
[-20.18077660 35.11744308]
[-34.98329163 32.69142532]
[-45.76417160 22.26201248]
[-48.67929840 7.54800367]
[-42.68922806 -6.20405340]
[-29.92983437 -14.09061337]
[-14.95070553 -13.29957962]
[-3.09292650 -4.11300993]
[1.41539860 10.19412804]
[8.60678196 23.35786629]
[-1.67498744 11.04264069]
[1.68389487 -4.64485312]
[16.10678101 -11.67051315]
[30.52966881 -4.64485312]
[33.88854980 11.04264069]
[23.60678101 23.35786629]
[44.90538788 36.58591080]
[45.98265076 58.20205307]
[58.20129013 66.90290833]
[70.41992950 75.60375977]
[82.63856506 84.30461121]
[90.18037415 85.66474152]
[95.21821594 93.72161865]
[96.39994049 89.62311554]
[99.76108551 85.92675018]
[105.07298279 83.59974670]
[111.72062683 83.47617340]
[118.77250671 86.11382294]
[125.10023499 91.68431091]
[129.53338623 99.91271210]
[141.75202942 108.61356354]
[153.97065735 117.31441498]
[166.18930054 126.01526642]
[178.40794373 134.71612549]
[194.81733704 138.97851562]
[195.26409912 155.92657471]
[179.10205078 161.04756165]
[169.70709229 146.93476868]
[157.48844910 138.23390198]
[145.26980591 129.53305054]
[133.05117798 120.83219910]
[120.83253479 112.13134766]
[107.50000000 119.00474548]
[107.50000000 134.00474548]
[107.50000000 149.00474548]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 43]
[5 41]
[6 40]
[7 39]
[8 38]
[10 20]
[30 36]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

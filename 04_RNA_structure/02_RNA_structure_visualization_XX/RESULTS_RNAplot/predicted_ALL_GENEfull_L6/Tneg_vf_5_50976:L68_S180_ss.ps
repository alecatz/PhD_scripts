%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
ACCCTAAATTACCAATCTTGATCCGTGAATGTAGTGGAGTCCAGCCTCAGATGTGGGCAAGATATGGT\
) def
/coor [
[92.50000000 224.24189758]
[92.50000000 209.24189758]
[92.50000000 194.24189758]
[80.47122192 192.50088501]
[68.76522064 189.23101807]
[57.57545471 184.48635864]
[47.08687973 178.34530640]
[37.47284698 170.90939331]
[28.89225388 162.30148315]
[21.48692131 152.66386414]
[15.37924290 142.15582275]
[10.67016506 130.95104980]
[7.43752050 119.23470306]
[5.73473644 107.20045471]
[5.58995676 95.04720306]
[7.00557470 82.97579956]
[9.95819283 71.18577576]
[14.39900970 59.87199402]
[20.25462914 49.22143936]
[27.42827034 39.41014481]
[35.80136871 30.60027313]
[45.23553467 22.93742943]
[55.57483673 16.54826927]
[49.59881973 2.79009914]
[43.62280655 -10.96807003]
[28.37982178 -13.34609509]
[16.85744858 -23.60467529]
[12.73243141 -38.47033310]
[17.32104874 -53.19948959]
[29.15909004 -63.09213257]
[44.46907806 -64.99154663]
[58.36565399 -58.29163742]
[66.41446686 -45.13032532]
[66.04717255 -29.70733643]
[57.38097382 -16.94408607]
[63.35699081 -3.18591714]
[69.33300781 10.57225227]
[87.70017242 6.26366425]
[106.55712891 5.68780279]
[125.15297699 8.86760044]
[142.74719238 15.67643261]
[158.63914490 25.84316063]
[172.19599915 38.96292877]
[182.87789917 54.51329041]
[190.25946045 71.87500000]
[194.04675293 90.35669708]
[209.04287720 90.01525116]
[224.03898621 89.67379761]
[239.03509521 89.33235168]
[252.75808716 80.35394287]
[267.27108765 87.98969269]
[267.64437866 104.38459015]
[253.49395752 112.67297363]
[239.37654114 104.32846832]
[224.38043213 104.66991425]
[209.38432312 105.01136017]
[194.38821411 105.35280609]
[192.34169006 120.26814270]
[187.95346069 134.66949463]
[181.33480835 148.19165039]
[172.65354919 160.49171448]
[162.12986755 171.25775146]
[150.03060913 180.21673584]
[136.66261292 187.14149475]
[122.36488342 191.85639954]
[107.50000000 194.24189758]
[107.50000000 209.24189758]
[107.50000000 224.24189758]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[23 37]
[24 36]
[25 35]
[46 57]
[47 56]
[48 55]
[49 54]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CAGCATTCCAGAGCATAATGTTGTTGTCCTGTGGAGCACCACTAATACCCGCAGGTGGGTCTTGCTGCAACCTCTTGAAATCCCTCATTAACCTCTTCCTTGCTGGCG\
) def
/coor [
[220.45130920 153.48478699]
[206.57252502 147.79449463]
[192.69374084 142.10421753]
[178.81495667 136.41392517]
[164.93618774 130.72363281]
[146.13800049 134.85040283]
[133.79312134 119.04293060]
[119.60956573 114.16168213]
[105.42600250 109.28043365]
[116.49425507 119.40435028]
[124.75939941 131.92182922]
[129.72235107 146.07701111]
[131.08338928 161.01513672]
[128.76037598 175.83416748]
[122.89354706 189.63925171]
[113.83718872 201.59677124]
[102.13816833 210.98468018]
[88.50292206 217.23609924]
[73.75482178 219.97351074]
[58.78442001 219.03163147]
[44.49570847 214.46733093]
[31.75151062 206.55624390]
[21.32138252 195.77606201]
[13.83514595 182.77774048]
[9.74485588 168.34619141]
[9.29750443 153.35285950]
[12.52010441 138.70312500]
[19.21806145 125.28160095]
[28.98691750 113.89874268]
[41.23678207 105.24190521]
[55.22795105 99.83383179]
[70.11556244 98.00109100]
[84.99617767 99.85322571]
[72.07844543 92.22877502]
[55.68378830 92.61236572]
[47.38651276 78.46714783]
[55.72215271 64.34449768]
[72.11570740 64.77259064]
[79.70290375 79.31104279]
[92.62062836 86.93550110]
[98.78828430 82.66817474]
[90.25363159 70.33287048]
[78.32489014 61.23862839]
[83.28786469 47.08345795]
[98.28388214 47.42936325]
[102.58893585 61.79821777]
[111.12358856 74.13352203]
[117.29123688 69.86619568]
[114.71017456 55.08992767]
[103.77980804 42.86457825]
[109.15843964 27.37256813]
[125.31298065 24.55074883]
[135.62503052 37.30196762]
[129.48643494 52.50886536]
[132.06750488 67.28513336]
[123.29177094 83.38220978]
[110.30725098 95.09687042]
[124.49081421 99.97811890]
[138.67437744 104.85937500]
[148.33259583 99.45288849]
[159.14450073 100.32442474]
[167.46492004 106.93286133]
[170.62646484 116.84485626]
[184.50524902 122.53514099]
[198.38403320 128.22543335]
[212.26281738 133.91571045]
[226.14160156 139.60600281]
[218.30375671 126.81662750]
[213.56587219 112.58453369]
[212.17413330 97.64923859]
[214.20085144 82.78678894]
[219.54074097 68.76945496]
[227.91630554 56.32558823]
[238.89236450 46.10177994]
[251.89857483 38.62927628]
[266.25912476 34.29634857]
[281.22784424 33.32814026]
[296.02694702 35.77496338]
[309.88742065 41.50967789]
[322.08911133 50.23430252]
[331.99795532 61.49549866]
[339.09915161 74.70812225]
[343.02362061 89.18563080]
[343.56753540 104.17576599]
[340.70257568 118.89962769]
[334.57763672 132.59214783]
[325.51095581 144.54183960]
[313.97363281 154.12780762]
[300.56521606 160.85194397]
[285.98236084 164.36485291]
[270.98284912 164.48400879]
[256.34600830 161.20321655]
[242.83340454 154.69354248]
[249.89244080 167.92872620]
[256.95147705 181.16390991]
[264.01049805 194.39909363]
[279.39730835 196.40550232]
[290.64297485 207.09729004]
[293.42333984 222.36323547]
[286.66928101 236.33328247]
[272.97784424 243.63565063]
[257.61370850 241.46244812]
[246.48468018 230.64929199]
[243.87010193 215.35408020]
[250.77531433 201.45811462]
[243.71627808 188.22293091]
[236.65725708 174.98776245]
[229.59822083 161.75257874]
] def
/pairs [
[1 67]
[2 66]
[3 65]
[4 64]
[5 63]
[7 59]
[8 58]
[9 57]
[33 40]
[34 39]
[48 55]
[49 54]
[93 108]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

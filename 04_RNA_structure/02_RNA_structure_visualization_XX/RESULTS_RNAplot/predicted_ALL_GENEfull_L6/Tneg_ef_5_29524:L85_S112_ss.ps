%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
TTCGCTGTTAACAGATCCAAATCCAGATGACCCTTTGGTACCAGAGATTGCACACATGTACAAAACCGACAGAGCCAAATACGAG\
) def
/coor [
[52.27106857 302.09683228]
[52.27106857 287.09683228]
[52.27106857 272.09683228]
[52.27106857 257.09683228]
[41.88533783 249.24145508]
[37.93211746 236.62852478]
[42.09780502 223.87774658]
[53.05050278 215.79869080]
[53.59833527 200.80870056]
[47.08135605 198.45849609]
[41.14985275 194.85997009]
[36.04046249 190.15209961]
[31.95793533 184.51818848]
[29.06691933 178.17877197]
[27.48533630 171.38293457]
[27.27956581 164.39860535]
[28.46167755 157.50187683]
[30.98878670 150.96621704]
[34.76460648 145.05151367]
[39.64311218 139.99385071]
[45.43417358 135.99595642]
[51.91097641 133.21922302]
[58.81890869 131.77705383]
[65.88554382 131.73036194]
[72.83142090 133.08491516]
[63.54516220 122.44521332]
[58.22589111 109.36305237]
[57.45244598 95.26200104]
[61.30899429 81.67654419]
[69.37586975 70.08502960]
[60.64798355 57.88568115]
[45.01769638 55.54694748]
[35.68645096 42.79142380]
[38.19030762 27.18673897]
[51.04377365 17.99087143]
[66.62111664 20.65957069]
[75.68057251 33.60954285]
[72.84732819 49.15779877]
[81.57521057 61.35714340]
[97.30184174 57.27456284]
[113.41711426 59.34629059]
[127.59974670 67.27391052]
[139.12945557 57.67881775]
[150.65916443 48.08372116]
[150.21627808 25.81807899]
[165.63854980 10.10886765]
[187.39691162 10.14061069]
[196.56451416 -1.73183715]
[193.04988098 -16.96933365]
[200.19799805 -30.87754631]
[214.63375854 -36.88944244]
[229.54103088 -32.16638565]
[237.88105774 -18.93846130]
[235.71592712 -3.45149016]
[224.06796265 6.98205280]
[208.43696594 7.43576860]
[199.26936340 19.30821609]
[203.43525696 26.99651718]
[205.02853394 35.62953186]
[203.87245178 44.36659622]
[200.05902100 52.35021973]
[193.94210815 58.79024506]
[186.10469055 63.04204178]
[177.30331421 64.67099762]
[168.39509583 63.49686813]
[160.25425720 59.61342621]
[148.72454834 69.20852661]
[137.19483948 78.80361938]
[142.18122864 92.68656158]
[142.15948486 107.43782806]
[137.13215637 121.30600739]
[127.69615936 132.64453125]
[114.97181702 140.10720825]
[100.46988678 142.80796814]
[85.91216278 140.42617798]
[97.49651337 163.53495789]
[90.37759399 188.18333435]
[68.58832550 201.35652161]
[68.04049683 216.34651184]
[80.15089417 228.81158447]
[79.62820435 245.84828186]
[67.27107239 257.09683228]
[67.27107239 272.09683228]
[67.27107239 287.09683228]
[67.27107239 302.09683228]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[4 82]
[8 79]
[9 78]
[25 75]
[30 39]
[31 38]
[42 68]
[43 67]
[44 66]
[47 57]
[48 56]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

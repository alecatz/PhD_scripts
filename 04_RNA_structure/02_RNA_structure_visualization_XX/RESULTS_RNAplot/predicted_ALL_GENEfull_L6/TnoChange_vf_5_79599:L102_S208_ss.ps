%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GATATGTCATGCTTCCAAGGGTTATTCTTCTGTCCTGAAGCAGCTTCATTGCTGCTTCATAACTTCTGCATTTACCATATCAGTCCACCTGGGCATGAGGTC\
) def
/coor [
[86.17269135 249.62545776]
[86.17269135 234.62545776]
[86.17269135 219.62545776]
[78.18586731 212.92327881]
[75.23440552 202.69244385]
[78.55945587 192.34370422]
[87.26561737 185.47167969]
[88.18007660 170.49957275]
[59.37886429 158.82026672]
[38.25619507 136.02226257]
[28.80485725 106.41503143]
[13.80660248 106.18627930]
[-1.19165361 105.95753479]
[-16.18990898 105.72879028]
[-31.18816566 105.50003815]
[-44.60068512 120.23826599]
[-64.22631073 120.63197327]
[-77.80042267 106.86785889]
[-92.75683594 108.01053619]
[-107.71324921 109.15321350]
[-122.66966248 110.29588318]
[-132.76968384 122.45175171]
[-148.51445007 123.82223511]
[-160.56285095 113.59425354]
[-161.76678467 97.83589172]
[-151.41200256 85.89630127]
[-135.64178467 84.85903168]
[-123.81233978 95.33946991]
[-108.85592651 94.19680023]
[-93.89951324 93.05412292]
[-78.94309998 91.91144562]
[-74.45923615 82.35357666]
[-66.29091644 75.53680420]
[-55.92702866 72.79367065]
[-45.29512787 74.70584106]
[-36.40298462 80.98241425]
[-30.95941734 90.50178528]
[-15.96116161 90.73052979]
[-0.96290570 90.95928192]
[14.03534985 91.18802643]
[29.03360558 91.41677094]
[31.36605072 80.01795959]
[35.51676941 69.14852142]
[41.37580109 59.09640503]
[48.78792191 50.12792587]
[57.55677032 42.48067093]
[67.45004272 36.35723877]
[78.20563507 31.91985130]
[89.53861237 29.28606796]
[101.14874268 28.52565956]
[112.72843170 29.65877533]
[123.97091675 32.65539551]
[134.57835388 37.43613052]
[143.17160034 25.14156342]
[151.76483154 12.84699821]
[144.24249268 -0.43371373]
[143.23596191 -15.66360664]
[148.94508362 -29.81877518]
[160.23628235 -40.08869934]
[174.86772156 -44.43427658]
[189.93428040 -41.99269485]
[202.44450378 -33.24872589]
[209.91447449 -19.93849373]
[210.86103821 -4.70475531]
[205.09622192 9.42782116]
[193.76464844 19.65320015]
[179.11622620 23.94112778]
[164.05938721 21.44023132]
[155.46615601 33.73479843]
[146.87292480 46.02936172]
[151.81990051 50.75978470]
[156.29177856 55.94166183]
[160.24754333 61.52747726]
[163.65093994 67.46602631]
[166.47074890 73.70285797]
[168.68115234 80.18079376]
[170.26184082 86.84043884]
[171.19834900 93.62072754]
[171.48208618 100.45951080]
[171.11045837 107.29408264]
[170.08685303 114.06177521]
[168.42066956 120.70054626]
[166.12718201 127.14952850]
[163.22741699 133.34959412]
[159.74795532 139.24389648]
[171.35217285 148.74873352]
[187.61363220 150.86927795]
[193.65722656 166.11418152]
[183.26580811 178.80079651]
[167.12918091 175.87823486]
[161.84732056 160.35296631]
[150.24310303 150.84811401]
[142.24995422 157.66143799]
[133.34472656 163.22998047]
[123.71965790 167.43351746]
[113.58252716 170.18130493]
[103.15218353 171.41403198]
[102.23771667 186.38613892]
[112.13168335 203.81819153]
[101.17269135 219.62545776]
[101.17269135 234.62545776]
[101.17269135 249.62545776]
] def
/pairs [
[1 102]
[2 101]
[3 100]
[7 98]
[8 97]
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[18 31]
[19 30]
[20 29]
[21 28]
[53 70]
[54 69]
[55 68]
[85 92]
[86 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

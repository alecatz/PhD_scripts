%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGGGTGATTGCCCTAAGACCAATTATTTGTTTCTTGGAGATTTTGTTGACCGAGGTTTTTATTCGGTTGAGACATTTCTACTTCTTCTAGCTCTCAAGGT\
) def
/coor [
[125.22376251 158.69427490]
[118.12735748 145.47909546]
[111.03096008 132.26391602]
[103.93455505 119.04872894]
[108.03480530 133.47744751]
[103.31927490 147.71696472]
[91.41752625 156.84649658]
[76.44246674 157.71112061]
[63.56906509 150.01205444]
[57.24602127 136.40988159]
[59.65839767 121.60514069]
[69.97254944 110.71393585]
[84.62453461 107.50000000]
[69.62453461 107.50000000]
[59.94668961 121.27024078]
[44.14513397 126.56752777]
[28.43727112 121.51399994]
[18.88189507 108.26450348]
[3.88900900 108.72643280]
[-11.10387707 109.18835449]
[-18.95256424 122.46998596]
[-32.74613953 129.37945557]
[-48.08312225 127.71199036]
[-60.06954193 117.99965668]
[-64.88056946 103.34163666]
[-60.98102570 88.41525269]
[-49.61524200 77.98344421]
[-34.40999985 75.37498474]
[-20.21723175 81.42220306]
[-11.56580257 94.19547272]
[3.42708302 93.73354340]
[18.41996956 93.27162170]
[24.93821335 81.51067352]
[36.53244400 74.48787689]
[50.19244385 74.15300751]
[62.30833435 80.70271301]
[69.62453461 92.50000000]
[84.62453461 92.50000000]
[97.61491394 85.00000000]
[105.11491394 72.00962067]
[112.61491394 59.01923752]
[107.63508606 46.39297867]
[110.84489441 33.40662766]
[120.83701324 24.80957031]
[133.76734924 23.61024284]
[141.66383362 10.85698509]
[149.56031799 -1.89627171]
[157.45680237 -14.64952850]
[164.95680237 -27.63990974]
[172.05319214 -40.85509109]
[179.14959717 -54.07027435]
[178.86172485 -69.88886261]
[191.69956970 -77.44127655]
[198.79597473 -90.65646362]
[205.89236450 -103.87164307]
[199.92637634 -118.32643127]
[204.69677734 -133.21862793]
[217.95112610 -141.51657104]
[233.43113708 -139.30226135]
[243.82762146 -127.62119293]
[244.23167419 -111.98883057]
[234.45251465 -99.78629303]
[219.10755920 -96.77523804]
[212.01115417 -83.56005859]
[204.91474915 -70.34487152]
[205.71022034 -55.47152710]
[192.36479187 -46.97387314]
[185.26838684 -33.75868988]
[178.17198181 -20.54350662]
[178.72908020 -15.63944912]
[176.08683777 -10.35952187]
[170.21005249 -6.75304651]
[162.31356812 6.00021076]
[154.41708374 18.75346756]
[146.52059937 31.50672531]
[151.09533691 47.60835266]
[142.51313782 62.36905670]
[125.60530090 66.51924133]
[118.10530090 79.50962067]
[110.60530090 92.50000000]
[116.94648743 99.94180298]
[117.14973450 111.95233154]
[124.24613953 125.16751099]
[131.34254456 138.38269043]
[138.43894958 151.59786987]
[147.12692261 152.51510620]
[154.60766602 156.83998108]
[159.62571716 163.75715637]
[161.37559509 172.02433777]
[159.63035583 180.19506836]
[154.76777649 186.87178040]
[160.18640137 200.85885620]
[165.60502625 214.84594727]
[179.64126587 222.61534119]
[182.17617798 238.45686340]
[171.26519775 250.21824646]
[155.27828979 248.87716675]
[146.47924805 235.46237183]
[151.61793518 220.26457214]
[146.19931030 206.27748108]
[140.78068542 192.29040527]
] def
/pairs [
[1 85]
[2 84]
[3 83]
[4 82]
[13 38]
[14 37]
[18 32]
[19 31]
[20 30]
[39 80]
[40 79]
[41 78]
[45 75]
[46 74]
[47 73]
[48 72]
[49 69]
[50 68]
[51 67]
[53 65]
[54 64]
[55 63]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

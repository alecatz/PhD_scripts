%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAAGTGATTCCATATCCTTTGTCCTGAATCCTAAAGTGATGATTCAGGTGGTATTTC\
) def
/coor [
[80.92283630 263.19067383]
[80.92283630 248.19065857]
[80.92283630 233.19065857]
[80.92283630 218.19065857]
[80.92283630 203.19065857]
[80.92283630 188.19065857]
[73.12928009 182.53807068]
[68.98970032 173.68893433]
[69.66493225 163.80059814]
[75.12296295 155.35800171]
[84.11274719 150.54927063]
[86.53947449 135.74687195]
[73.89458466 127.88426971]
[65.21668243 115.78436279]
[61.82446289 101.28585052]
[64.23340607 86.59194946]
[72.07745361 73.93553925]
[84.16461182 65.23988342]
[98.65812683 61.82638931]
[101.08485413 47.02399445]
[103.51158905 32.22159576]
[105.93831635 17.41919708]
[108.36504364 2.61679983]
[110.39004517 -12.24588394]
[112.01183319 -27.15795326]
[99.94701385 -36.77272415]
[95.01723480 -51.39123154]
[98.79556274 -66.34876251]
[110.07633972 -76.87242889]
[125.25992584 -79.60416412]
[139.50128174 -73.67227173]
[148.25604248 -60.96961212]
[148.73060608 -45.54955292]
[140.77354431 -32.33257294]
[126.92389679 -25.53616905]
[125.30211639 -10.62409878]
[127.81975555 -3.32708549]
[123.16744232 5.04352951]
[120.74071503 19.84592819]
[118.31398010 34.64832687]
[115.88725281 49.45072174]
[113.46052551 64.25312042]
[126.10541534 72.11573029]
[134.78330994 84.21563721]
[138.17553711 98.71414948]
[135.76658630 113.40805054]
[127.92254639 126.06446075]
[115.83538818 134.76011658]
[101.34187317 138.17361450]
[98.91514587 152.97601318]
[108.19520569 171.93601990]
[95.92283630 188.19065857]
[95.92283630 203.19065857]
[95.92283630 218.19065857]
[95.92283630 233.19065857]
[95.92283630 248.19065857]
[95.92283630 263.19067383]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[11 50]
[12 49]
[19 42]
[20 41]
[21 40]
[22 39]
[23 38]
[24 36]
[25 35]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

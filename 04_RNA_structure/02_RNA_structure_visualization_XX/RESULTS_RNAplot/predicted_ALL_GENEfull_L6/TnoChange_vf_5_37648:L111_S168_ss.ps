%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CTCACAGGTAGGATTAGCGAGCTTGAGGGTACGGAAACAGATATCGTAGAGAGCCTCATTGTCCAAAACCATACACTCGTCAGCGTTTTCGACAAGCTGATGCACAGAGAG\
) def
/coor [
[92.50000000 207.09704590]
[92.50000000 192.09704590]
[92.50000000 177.09704590]
[84.76270294 164.36978149]
[92.50000000 150.56961060]
[76.53634644 145.42016602]
[63.09862137 135.38111877]
[53.63344574 121.53318024]
[49.15977097 105.36712646]
[50.15919876 88.62329102]
[56.52413940 73.10418701]
[45.06357956 63.42660904]
[34.06450653 70.13613129]
[21.61871529 73.38677216]
[8.78481674 72.91435242]
[-3.34911919 68.77088165]
[-13.75780487 61.31906509]
[-21.56536865 51.20063400]
[-26.11905861 39.28108215]
[-27.04379272 26.57561684]
[-24.27304268 14.16272736]
[-37.19272995 6.54159737]
[-50.11242294 -1.07953274]
[-63.03211212 -8.70066261]
[-72.19660187 -0.85861504]
[-83.19864655 4.03738976]
[-95.12058258 5.59115124]
[-106.97148132 3.68473268]
[-117.76953125 -1.51266503]
[-126.62333679 -9.55965805]
[-132.80552673 -19.78014374]
[-135.81251526 -31.32009888]
[-135.40548706 -43.21893692]
[-131.62931824 -54.48946381]
[-143.61448669 -63.50922012]
[-158.41069031 -58.83463287]
[-173.11804199 -63.78172684]
[-182.08123779 -76.44824219]
[-181.85375977 -91.96365356]
[-172.52307129 -104.36196136]
[-157.67701721 -108.87576294]
[-143.02421570 -103.76940918]
[-134.19894409 -91.00640106]
[-134.59472656 -75.49437714]
[-122.60956573 -66.47462463]
[-106.87820435 -75.61894226]
[-88.69396973 -77.11540222]
[-71.58636475 -70.63066101]
[-58.89435196 -57.38466644]
[-53.11472702 -39.92139816]
[-55.41098022 -21.62035179]
[-42.49129105 -13.99922180]
[-29.57160187 -6.37809181]
[-16.65191269 1.24303818]
[-9.97403717 -5.09647989]
[-2.11458111 -9.89360905]
[6.57650375 -12.93475151]
[15.71223545 -14.08449554]
[24.88583183 -13.29164696]
[30.23515511 -27.30538177]
[27.10662842 -43.40334320]
[39.65943146 -53.95602798]
[54.98031998 -48.10773849]
[57.30847168 -31.87469482]
[44.24888992 -21.95605850]
[38.89956665 -7.94232464]
[54.79067993 8.06326962]
[60.62344360 29.96436119]
[54.74116135 51.96604538]
[66.20172119 61.64362717]
[79.52816772 53.15515900]
[94.81010437 49.14137268]
[110.58779144 49.98566437]
[125.35411835 55.60739136]
[137.69857788 65.46955109]
[146.44203186 78.63010406]
[150.74928284 93.83193970]
[150.20890808 109.62295532]
[164.36715698 114.57714081]
[178.52540588 119.53132629]
[192.68365479 124.48551178]
[208.26487732 121.74031067]
[217.72245789 133.24697876]
[231.88070679 138.20115662]
[243.02684021 127.71199799]
[257.77389526 123.61533356]
[272.73315430 126.85256195]
[284.46704102 136.67977905]
[290.27923584 150.83877563]
[288.83410645 166.07591248]
[280.46374512 178.88980103]
[267.09161377 186.33590698]
[251.79051208 186.70317078]
[238.07652283 179.90721130]
[229.10102844 167.50965881]
[226.92652893 152.35940552]
[212.76828003 147.40522766]
[198.19975281 150.50477600]
[187.72946167 138.64376831]
[173.57121277 133.68957520]
[159.41296387 128.73539734]
[145.25471497 123.78120422]
[140.01451111 131.81782532]
[133.36502075 138.73384094]
[125.54045105 144.28567505]
[116.81635284 148.27778625]
[107.50000000 150.56961060]
[115.23729706 164.36978149]
[107.50000000 177.09704590]
[107.50000000 192.09704590]
[107.50000000 207.09704590]
] def
/pairs [
[1 111]
[2 110]
[3 109]
[5 107]
[11 70]
[12 69]
[21 54]
[22 53]
[23 52]
[24 51]
[34 45]
[35 44]
[59 66]
[60 65]
[78 102]
[79 101]
[80 100]
[81 99]
[83 97]
[84 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

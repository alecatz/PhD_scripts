%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GTTTATGCTGATGGGAGTATATGCTTGGACATTCTCCAAAACCAATGGAGTCCAATATACGATGT\
) def
/coor [
[82.15101624 109.23848724]
[67.21894073 110.66432953]
[52.28686142 112.09016418]
[37.35478210 113.51600647]
[22.42270279 114.94184875]
[9.42049503 123.95590210]
[-3.98462391 117.46343994]
[-18.91670227 118.88928223]
[-28.96382332 130.79277039]
[-44.12738419 132.02606201]
[-55.41363144 122.37432098]
[-70.34571075 123.80015564]
[-85.27778625 125.22599792]
[-98.31500244 135.17401123]
[-113.34256744 128.60861206]
[-114.90140533 112.28372192]
[-101.38791656 102.99298859]
[-86.70362854 110.29392242]
[-71.77154541 108.86808014]
[-56.83946991 107.44223785]
[-47.58378983 95.82897186]
[-32.46084976 94.17024994]
[-20.34254265 103.95720673]
[-5.41046476 102.53136444]
[6.52370024 93.61929321]
[20.99686050 100.00977325]
[35.92893982 98.58393097]
[50.86101913 97.15808868]
[65.79309845 95.73224640]
[80.72517395 94.30640411]
[84.82507324 86.82208252]
[91.66081238 81.71356201]
[100.00000000 79.90184784]
[108.33918762 81.71356201]
[115.17492676 86.82208252]
[119.27482605 94.30640411]
[134.20690918 95.73224640]
[149.13897705 97.15808868]
[156.31077576 83.78494263]
[168.02464294 74.20223999]
[182.47587585 69.84613037]
[197.45332336 71.35060120]
[210.67779541 78.45540619]
[220.14880371 90.05046082]
[224.44725037 104.34915924]
[239.37933350 105.77499390]
[254.34111023 106.84508514]
[269.32412720 107.55881500]
[285.43301392 102.27297974]
[294.97164917 116.28906250]
[284.14389038 129.33497620]
[268.61038208 122.54182434]
[253.62738037 121.82809448]
[246.54747009 124.76129150]
[237.95349121 120.70707703]
[223.02140808 119.28123474]
[216.09460449 132.50804138]
[204.60035706 142.10116577]
[190.27027893 146.57482910]
[175.27876282 145.21762085]
[161.91308594 138.20530701]
[152.22444153 126.57891846]
[147.71313477 112.09016418]
[132.78106689 110.66432953]
[117.84898376 109.23848724]
] def
/pairs [
[1 30]
[2 29]
[3 28]
[4 27]
[5 26]
[7 24]
[8 23]
[11 20]
[12 19]
[13 18]
[36 65]
[37 64]
[38 63]
[45 56]
[46 55]
[47 53]
[48 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CAACATATATCGCCACAATACAGTCTACTGTGTAATGGTGTCGCTCTCGTATTTCTCTCTGTGCGCTGTG\
) def
/coor [
[102.21288300 110.37319183]
[94.05258179 122.95927429]
[85.89227295 135.54534912]
[89.43427277 150.94761658]
[80.97710419 164.29872131]
[65.53824615 167.67767334]
[52.27731323 159.07981873]
[49.06177139 143.60610962]
[57.79934692 130.43681335]
[73.30619812 127.38504791]
[81.46649933 114.79896545]
[89.62680817 102.21289062]
[74.74663544 104.10512543]
[59.78654480 103.01170349]
[45.33964539 98.97598267]
[31.97871399 92.15795135]
[20.23347282 82.82792664]
[10.56958103 71.35581970]
[3.37018275 58.19646454]
[-1.07928836 43.87158203]
[-2.60242510 28.94911575]
[-1.13883960 14.02068901]
[3.25344133 -0.32183066]
[10.40027714 -13.50980759]
[20.01832008 -25.02038002]
[31.72624207 -34.39719009]
[45.05986404 -41.26847458]
[59.49054337 -45.36181259]
[74.44615936 -46.51491165]
[89.33375549 -44.68205643]
[103.56310272 -39.93591690]
[116.57003021 -32.46466064]
[127.83887482 -22.56449890]
[136.92285156 -10.62794209]
[143.46180725 2.87176275]
[147.19650269 17.39939499]
[147.97885132 32.37897873]
[145.77786255 47.21661758]
[140.68077087 61.32405472]
[132.88967896 74.14196777]
[122.71347046 85.16216278]
[110.55410004 93.94860077]
[125.11209869 97.56311798]
[139.67008972 101.17763519]
[159.46504211 93.59152985]
[174.44783020 107.50212097]
[189.35614014 109.15803528]
[204.26446533 110.81394196]
[212.32078552 97.85021210]
[225.20863342 89.67304230]
[240.36912537 87.90602875]
[254.79212952 92.90000916]
[265.61392212 103.66342926]
[270.68588257 118.05919647]
[269.00091553 133.22901917]
[260.89361572 146.16093445]
[247.97366333 154.28727722]
[232.80633545 155.99458313]
[218.40310669 150.94383240]
[207.62376404 140.13789368]
[202.60855103 125.72225952]
[187.70022583 124.06635284]
[172.79191589 122.41043854]
[166.45141602 129.40153503]
[157.40611267 132.55386353]
[147.81600952 130.97212219]
[140.03996277 124.90895844]
[136.05557251 115.73562622]
[121.49758148 112.12111664]
[106.93958282 108.50659943]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[42 70]
[43 69]
[44 68]
[46 63]
[47 62]
[48 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

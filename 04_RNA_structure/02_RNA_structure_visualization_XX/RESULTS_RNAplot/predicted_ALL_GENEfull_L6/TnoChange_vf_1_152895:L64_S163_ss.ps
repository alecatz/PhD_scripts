%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCTTGGATACATAATTTATAGGCGGGTTTTACGCTATTATTCAGGAGAGGAAGATGGATTAGGT\
) def
/coor [
[92.50000000 191.38066101]
[92.50000000 176.38066101]
[92.50000000 161.38066101]
[84.76270294 148.65339661]
[92.50000000 134.85322571]
[92.50000000 119.85322571]
[82.39737701 111.85529327]
[78.78355408 99.48718262]
[82.99069977 87.30810547]
[93.46793365 79.80760956]
[94.19263458 64.82512665]
[94.91733551 49.84264374]
[84.57338715 38.19616699]
[85.52176666 23.01212120]
[96.68864441 13.22251797]
[97.41334534 -1.75996518]
[98.13804626 -16.74244881]
[84.44358063 -23.27982712]
[74.32260132 -34.53188324]
[69.29422760 -48.76315689]
[70.09534454 -63.79465103]
[76.57278442 -77.33745575]
[87.71138763 -87.34130859]
[101.79299164 -92.30493164]
[102.51769257 -107.28741455]
[103.24239349 -122.26989746]
[103.96709442 -137.25238037]
[90.74199677 -144.95661926]
[82.62191010 -157.93054199]
[81.47277832 -173.19285583]
[87.55867004 -187.23637390]
[99.48107910 -196.83401489]
[114.50033569 -199.78030396]
[129.16511536 -195.39820862]
[140.10556030 -184.69468689]
[144.80764771 -170.12934875]
[142.19085693 -155.04919434]
[132.85650635 -142.91954041]
[118.94957733 -136.52767944]
[118.22487640 -121.54519653]
[117.50017548 -106.56271362]
[116.77547455 -91.58023071]
[130.31228638 -85.28070831]
[140.43338013 -74.24852753]
[145.57351685 -60.14378357]
[144.92013550 -45.10514069]
[138.54173279 -31.42561340]
[127.38201141 -21.20290184]
[113.12052917 -16.01774788]
[112.39582825 -1.03526449]
[111.67112732 13.94721889]
[121.84104919 24.76888084]
[121.31952667 39.97357178]
[109.89981842 50.56734467]
[109.17511749 65.54982758]
[108.45041656 80.53231049]
[119.77893829 92.30622864]
[119.38412476 108.64037323]
[107.50000000 119.85322571]
[107.50000000 134.85322571]
[115.23729706 148.65339661]
[107.50000000 161.38066101]
[107.50000000 176.38066101]
[107.50000000 191.38066101]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[5 60]
[6 59]
[10 56]
[11 55]
[12 54]
[15 51]
[16 50]
[17 49]
[24 42]
[25 41]
[26 40]
[27 39]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

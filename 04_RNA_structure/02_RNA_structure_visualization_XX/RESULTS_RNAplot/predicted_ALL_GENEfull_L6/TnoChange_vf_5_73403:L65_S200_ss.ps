%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GTGTATAGCATGGTGAAATATGCAGCGATTGCACGTGGAGACGCTGAAGTGTTTATGAAGTTTGC\
) def
/coor [
[92.50000000 379.66592407]
[92.50000000 364.66592407]
[78.67464447 359.02777100]
[68.03237152 348.49746704]
[62.21679688 334.65750122]
[62.14283752 319.60485840]
[67.85289764 305.63314819]
[78.50568390 294.88320923]
[92.50000000 289.01510620]
[92.50000000 274.01510620]
[92.50000000 259.01510620]
[92.50000000 244.01509094]
[92.50000000 229.01509094]
[78.26325989 224.44604492]
[66.11937714 215.68841553]
[57.26499176 203.58964539]
[52.57740021 189.32719421]
[52.52762985 174.29389954]
[57.13313675 159.96195984]
[65.95487213 147.73881531]
[78.13909912 138.82887268]
[92.50000000 134.11485291]
[92.50000000 119.11485291]
[79.93568420 104.36472321]
[85.23715973 85.72812653]
[79.00593567 72.08364868]
[65.34099579 63.01714325]
[66.63027191 46.66875458]
[81.54746246 39.85630417]
[94.74703979 49.58785248]
[92.65041351 65.85242462]
[98.88164520 79.49690247]
[99.51134491 79.47223663]
[100.14151764 79.46691132]
[95.17335510 64.21250153]
[104.12208557 50.89710999]
[120.12300873 49.73515701]
[130.90158081 61.61800003]
[128.18940735 77.43013763]
[114.06703186 85.04184723]
[120.31781006 97.03108215]
[117.75896454 110.30760956]
[107.50000000 119.11485291]
[107.50000000 134.11485291]
[121.86090088 138.82887268]
[134.04513550 147.73881531]
[142.86686707 159.96195984]
[147.47236633 174.29389954]
[147.42259216 189.32719421]
[142.73501587 203.58964539]
[133.88063049 215.68841553]
[121.73674011 224.44604492]
[107.50000000 229.01509094]
[107.50000000 244.01509094]
[107.50000000 259.01510620]
[107.50000000 274.01510620]
[107.50000000 289.01510620]
[121.49431610 294.88320923]
[132.14710999 305.63314819]
[137.85716248 319.60485840]
[137.78320312 334.65750122]
[131.96763611 348.49746704]
[121.32535553 359.02777100]
[107.50000000 364.66592407]
[107.50000000 379.66592407]
] def
/pairs [
[1 65]
[2 64]
[9 57]
[10 56]
[11 55]
[12 54]
[13 53]
[22 44]
[23 43]
[25 32]
[26 31]
[34 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
ATCTCTCTTCTGGGCTAGCTTGTGGTCTTGCTGGTCTCTCTGCTGGTATGGCTATTGGAATCGTCGGTGATGCTGGTGTTAGGT\
) def
/coor [
[101.08011627 382.07113647]
[101.08011627 367.07113647]
[101.08011627 352.07113647]
[101.08011627 337.07113647]
[90.39923859 326.75344849]
[90.18556213 311.54132080]
[101.08011627 300.40820312]
[92.67866516 291.49707031]
[92.70015717 278.84591675]
[101.68743134 269.37649536]
[102.24170685 254.38674927]
[102.79598236 239.39700317]
[103.35025024 224.40724182]
[93.05792999 213.70193481]
[93.40650177 198.49229431]
[104.70500183 187.76933289]
[105.25927734 172.77958679]
[105.81354523 157.78982544]
[106.36782074 142.80007935]
[106.92209625 127.81031799]
[88.21147919 124.63031769]
[76.45341492 110.91478729]
[76.20296478 93.76399994]
[86.41350555 81.13558197]
[82.04266357 66.78651428]
[77.67181396 52.43744659]
[73.30097198 38.08837891]
[59.63511276 30.61294556]
[55.40686035 15.99868679]
[62.61776352 3.01645017]
[58.24691772 -11.33261585]
[53.87607193 -25.68168259]
[49.50522614 -40.03075027]
[45.13438034 -54.37981415]
[40.76353455 -68.72888184]
[26.70066071 -75.94075775]
[21.93586922 -91.00967407]
[29.29602432 -104.99551392]
[44.41447830 -109.60072327]
[58.32171631 -102.09310913]
[62.76682663 -86.92681885]
[55.11259842 -73.09972382]
[59.48344421 -58.75065994]
[63.85429001 -44.40159607]
[68.22513580 -30.05252838]
[72.59598541 -15.70346260]
[76.96682739 -1.35439610]
[90.19066620 5.40324688]
[94.82773590 19.89297676]
[87.65003204 33.71753311]
[92.02088165 48.06660080]
[96.39173126 62.41566467]
[100.76257324 76.76473236]
[110.40509796 77.70828247]
[119.33661652 82.68903351]
[125.86546326 91.24790192]
[128.57254028 102.22246552]
[143.26368713 99.19422913]
[153.24961853 86.63793945]
[169.29220581 86.76063538]
[179.08493042 99.46819305]
[175.11566162 115.01246643]
[160.42927551 121.46921539]
[146.29191589 113.88537598]
[131.60076904 116.91361237]
[121.91184998 128.36459351]
[121.35757446 143.35433960]
[120.80330658 158.34410095]
[120.24903107 173.33386230]
[119.69475555 188.32360840]
[130.17048645 199.85169983]
[129.39483643 215.04554749]
[118.34001160 224.96151733]
[117.78573608 239.95126343]
[117.23146057 254.94102478]
[116.67719269 269.93078613]
[125.69838715 285.85427856]
[116.08011627 300.40820312]
[126.97467041 311.54132080]
[126.76098633 326.75344849]
[116.08011627 337.07113647]
[116.08011627 352.07113647]
[116.08011627 367.07113647]
[116.08011627 382.07113647]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[7 78]
[10 76]
[11 75]
[12 74]
[13 73]
[16 70]
[17 69]
[18 68]
[19 67]
[20 66]
[24 53]
[25 52]
[26 51]
[27 50]
[30 47]
[31 46]
[32 45]
[33 44]
[34 43]
[35 42]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

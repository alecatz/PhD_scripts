%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CTTAGCATTCTGGTGCTTTGTTGGCTTCATGAGTAAAGCACGGCATAATTTCCGGTTAGACGAGG\
) def
/coor [
[158.51290894 141.18675232]
[145.18037415 134.31335449]
[137.52175903 134.04037476]
[131.38859558 126.78246307]
[118.39820862 119.28246307]
[105.40782928 111.78246307]
[91.91549683 105.22829437]
[77.98998260 99.65335846]
[64.06446075 94.07842255]
[50.13894272 88.50348663]
[36.08469772 83.26152039]
[21.90968513 78.35550690]
[7.73467207 73.44948578]
[-6.34939957 80.10355377]
[-20.65498924 74.92623138]
[-26.91183662 61.45820999]
[-41.08684921 56.55219269]
[-56.08758545 62.24055481]
[-69.81369781 53.93553162]
[-71.73568726 38.00802612]
[-60.37916565 26.67625427]
[-44.45589066 28.63298416]
[-36.18082809 42.37717819]
[-22.00581551 47.28319931]
[-8.76222801 40.56435013]
[5.68313885 45.33782196]
[12.64069176 59.27447128]
[26.81570435 64.18048859]
[40.99071503 69.08650970]
[48.61021805 68.26676941]
[55.71387863 74.57796478]
[69.63939667 80.15290070]
[83.56491852 85.72784424]
[97.49043274 91.30278015]
[101.58494568 90.09592438]
[106.20007324 90.90394592]
[110.32408142 93.91052246]
[112.90782928 98.79208374]
[125.89820862 106.29208374]
[138.88859558 113.79208374]
[152.05377197 120.98081970]
[165.38630676 127.85421753]
[172.64260864 123.49921417]
[180.93025208 122.17575836]
[189.04510498 124.02313232]
[195.82775879 128.72373962]
[200.32925415 135.55622864]
[201.94371033 143.50585938]
[200.48941040 151.41496277]
[211.82565308 161.23786926]
[223.16189575 171.06079102]
[234.49813843 180.88369751]
[249.27128601 176.43873596]
[264.09606934 180.70832825]
[274.24194336 192.33006287]
[276.47140503 207.59548950]
[270.07305908 221.63345337]
[257.08853149 229.96449280]
[241.66122437 229.93022156]
[228.71386719 221.54156494]
[222.37794495 207.47529602]
[224.67523193 192.21994019]
[213.33897400 182.39703369]
[202.00273132 172.57411194]
[190.66648865 162.75120544]
] def
/pairs [
[1 42]
[2 41]
[4 40]
[5 39]
[6 38]
[7 34]
[8 33]
[9 32]
[10 31]
[11 29]
[12 28]
[13 27]
[16 24]
[17 23]
[49 65]
[50 64]
[51 63]
[52 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

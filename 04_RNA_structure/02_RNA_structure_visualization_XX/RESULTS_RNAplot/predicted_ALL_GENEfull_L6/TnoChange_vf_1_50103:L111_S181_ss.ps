%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CTAGTATCACAGGGAATTTCGGGTTTCAACCTTGTTCTCACGGTGACTTCCTTGGTGCTATTCTTGGCACGGGAATTTCCAGGGAAAAACTTGGAGATATCTTAATTCAGG\
) def
/coor [
[88.18453979 379.65591431]
[88.18453979 364.65591431]
[80.44724274 351.92864990]
[88.18453979 338.12847900]
[88.18453979 323.12847900]
[88.18453979 308.12847900]
[74.28628540 304.34674072]
[61.84090805 297.07162476]
[51.70959091 286.79925537]
[44.59527969 274.23324585]
[40.99394608 260.23681641]
[41.16000748 245.77326965]
[45.08835602 231.83975220]
[52.51428604 219.39855957]
[62.93130493 209.31062317]
[75.62570190 202.27593994]
[89.72541046 198.78501892]
[90.14610291 183.79090881]
[90.56679535 168.79681396]
[90.98748779 153.80271912]
[80.79690552 151.06072998]
[71.32494354 146.40795898]
[62.92605972 140.01849365]
[55.91455841 132.13146973]
[50.55282593 123.04201508]
[47.04150772 113.09027863]
[45.51200485 102.64867401]
[46.02155304 92.10795593]
[48.55108261 81.86257172]
[35.22439957 74.97784424]
[21.89771461 68.09311676]
[6.08573151 68.63325500]
[-1.67047715 55.91749954]
[-14.99716187 49.03277206]
[-31.34418678 50.33922577]
[-40.42504883 36.68382645]
[-32.89813995 22.11407661]
[-16.50649261 21.61808586]
[-8.11243343 35.70608521]
[5.21425104 42.59081650]
[20.07302094 41.55823135]
[28.78244209 54.76642990]
[42.10912704 61.65115738]
[55.43581009 68.53588867]
[69.00686646 55.10697937]
[86.37410736 47.17678070]
[105.41031647 45.71661758]
[123.78383636 50.90533066]
[132.11738586 38.43328857]
[140.45094299 25.96124268]
[148.78450012 13.48919868]
[157.11804199 1.01715493]
[158.35168457 -14.75588226]
[171.85591125 -21.03960800]
[168.72319031 -30.20415115]
[170.22550964 -39.63134766]
[175.88446045 -47.14601517]
[184.27803040 -51.07611847]
[193.39588928 -50.62404633]
[202.74824524 -62.35152054]
[212.10058594 -74.07899475]
[221.45294189 -85.80646515]
[230.80528259 -97.53393555]
[240.15762329 -109.26140594]
[236.88197327 -124.55206299]
[244.24694824 -138.34666443]
[258.77505493 -144.13182068]
[273.60656738 -139.17597961]
[281.73849487 -125.81910706]
[279.33117676 -110.36792755]
[267.52130127 -100.11801910]
[251.88510132 -99.90905762]
[242.53276062 -88.18158722]
[233.18040466 -76.45411682]
[223.82806396 -64.72664642]
[214.47570801 -52.99917221]
[205.12336731 -41.27170181]
[204.08976746 -20.73938370]
[184.32795715 -12.70605564]
[183.69038391 2.17489839]
[169.59008789 9.35070801]
[161.25654602 21.82275200]
[152.92298889 34.29479599]
[144.58943176 46.76684189]
[136.25587463 59.23888397]
[146.34294128 71.21999359]
[152.61015320 85.57332611]
[154.54092407 101.11578369]
[151.97610474 116.56627655]
[145.12712097 130.65127563]
[134.55848694 142.20982361]
[121.14133453 150.28918457]
[105.98159027 154.22340393]
[105.56089783 169.21749878]
[105.14020538 184.21160889]
[104.71950531 199.20570374]
[119.63716125 203.97154236]
[132.60951233 212.71885681]
[142.60147095 224.73991394]
[148.81852722 239.06619263]
[150.76986694 254.54632568]
[148.30714417 269.93875122]
[141.63574219 284.01119995]
[131.29759216 295.63934326]
[118.12727356 303.89672852]
[103.18453979 308.12847900]
[103.18453979 323.12847900]
[103.18453979 338.12847900]
[110.92184448 351.92864990]
[103.18453979 364.65591431]
[103.18453979 379.65591431]
] def
/pairs [
[1 111]
[2 110]
[4 108]
[5 107]
[6 106]
[17 96]
[18 95]
[19 94]
[20 93]
[29 44]
[30 43]
[31 42]
[33 40]
[34 39]
[48 85]
[49 84]
[50 83]
[51 82]
[52 81]
[54 79]
[59 77]
[60 76]
[61 75]
[62 74]
[63 73]
[64 72]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AGATCACAGAGATTCCAATAAGGAAGAAGACTTACATTTGGCCCAGACTAGCGAAATCAAAGCCAGGATCCATCTCTTGCACTATATCACTCGGTGGTTGT\
) def
/coor [
[92.50000000 120.57494354]
[85.17363739 118.97044373]
[70.52091217 115.76144409]
[63.19454956 114.15695190]
[56.92514420 127.78392792]
[55.79790497 144.70036316]
[39.23052216 148.30010986]
[31.18514824 133.37669373]
[43.29816437 121.51452637]
[49.56756973 107.88754272]
[44.86564255 102.04444122]
[30.04316521 104.34534454]
[35.46178436 90.35823059]
[30.75985718 84.51512909]
[16.10713196 87.72412109]
[1.45440769 90.93312073]
[-2.53290129 105.71012878]
[-12.93921280 116.93363953]
[-27.37323189 122.02458191]
[-42.51812744 119.81307983]
[-54.89371490 110.80733490]
[-61.65616989 97.07679749]
[-61.25153732 81.77663422]
[-53.77278900 68.42272949]
[-40.93849564 60.08369064]
[-25.69787979 58.67578506]
[-11.55312347 64.52252960]
[-1.75458860 76.28039551]
[12.89813614 73.07139587]
[27.55086136 69.86240387]
[55.66098022 53.13950729]
[83.19094849 52.31875992]
[102.92155457 63.51453018]
[110.83247375 80.11152649]
[106.90258789 94.71734619]
[119.65583801 86.82086945]
[132.40910339 78.92438507]
[145.16235352 71.02790070]
[148.92495728 58.57225037]
[159.85366821 52.28461838]
[171.72808838 55.10691452]
[184.71847534 47.60691452]
[197.70886230 40.10691452]
[183.18116760 36.37242889]
[172.81991577 25.52602386]
[169.75367737 10.84276390]
[174.90827942 -3.24375677]
[186.72731018 -12.48012638]
[201.64201355 -14.07743359]
[215.14892578 -7.55337286]
[223.16964722 5.12212229]
[223.28230286 20.12169838]
[215.45213318 32.91696930]
[229.99908447 29.25826263]
[229.78926086 13.34422684]
[233.33430481 -2.16281652]
[240.43066406 -16.39000511]
[250.67495728 -28.53746605]
[263.48699951 -37.92328644]
[278.14257812 -44.02178955]
[293.81445312 -46.49298096]
[309.61892700 -45.20149994]
[324.66589355 -40.22401810]
[338.10870361 -31.84471703]
[349.19207764 -20.53905106]
[357.29425049 -6.94678068]
[371.58837891 -11.49407101]
[376.34625244 -26.26371574]
[388.89663696 -35.38880539]
[404.41369629 -35.36055374]
[416.93075562 -26.18982506]
[421.63479614 -11.40295315]
[416.71701050 3.31421018]
[404.06835938 12.30261421]
[388.55252075 12.10603428]
[376.13568115 2.80005932]
[361.84155273 7.34734917]
[363.12738037 21.44357681]
[361.40716553 35.49983978]
[356.75582886 48.88204193]
[349.38052368 60.98592377]
[339.61145020 71.26433563]
[327.88717651 79.25199127]
[314.73480225 84.58650970]
[300.74633789 87.02487946]
[286.55197144 86.45449829]
[272.79190063 82.89839172]
[260.08715820 76.51429749]
[249.01177979 67.58764648]
[240.06686401 56.51882172]
[233.65779114 43.80521774]
[219.11083984 47.46392059]
[205.20886230 53.09729767]
[192.21847534 60.59729767]
[179.22808838 68.09729767]
[171.39187622 83.71605682]
[153.05883789 83.78115845]
[140.30558777 91.67764282]
[127.55232239 99.57411957]
[114.79906464 107.47060394]
[107.50000000 120.57494354]
] def
/pairs [
[1 101]
[4 10]
[5 9]
[14 30]
[15 29]
[16 28]
[35 100]
[36 99]
[37 98]
[38 97]
[41 95]
[42 94]
[43 93]
[53 92]
[54 91]
[66 77]
[67 76]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

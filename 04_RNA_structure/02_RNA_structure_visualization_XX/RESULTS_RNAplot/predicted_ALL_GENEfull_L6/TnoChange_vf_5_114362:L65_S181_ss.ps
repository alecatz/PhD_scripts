%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCTTCTTTTGCAGTTAATCTGTCTTGATGATCATACCGAAGTAGCTTGTCGAGGAAATCAATCGC\
) def
/coor [
[92.50000000 163.27252197]
[92.50000000 148.27252197]
[86.39624786 146.91932678]
[80.51530457 144.79768372]
[74.95349121 141.94232178]
[69.80190277 138.40000916]
[65.14490509 134.22875977]
[61.05878067 129.49690247]
[57.61045456 124.28193665]
[54.85640335 118.66926575]
[40.27922821 122.20565033]
[30.73516846 135.10101318]
[14.69799423 135.53527832]
[4.47005272 123.17531586]
[7.89734554 107.50262451]
[22.35074615 100.53995514]
[36.74284363 107.62847137]
[51.32001877 104.09208679]
[55.20231628 80.51530457]
[69.80190277 61.59999084]
[91.62600708 51.87140274]
[115.45348358 53.65697861]
[122.32688141 40.32444382]
[121.77330017 24.51292610]
[134.48245239 16.74591255]
[141.35585022 3.41338110]
[148.22924805 -9.91915035]
[155.10264587 -23.25168228]
[161.97604370 -36.58421326]
[168.84944153 -49.91674423]
[168.29586792 -65.72826385]
[181.00502014 -73.49527740]
[172.16635132 -85.99073029]
[170.15850830 -101.16397095]
[175.44290161 -115.52829742]
[186.80520630 -125.78289032]
[201.63444519 -129.57131958]
[216.52297974 -126.02303314]
[228.04951477 -115.95340729]
[233.56535339 -101.67636108]
[231.80299377 -86.47264862]
[223.16740417 -73.83599091]
[209.64299011 -66.67018127]
[194.33755493 -66.62187958]
[195.38276672 -51.76399612]
[182.18197632 -43.04334641]
[175.30857849 -29.71081543]
[168.43518066 -16.37828445]
[161.56178284 -3.04575300]
[154.68838501 10.28677845]
[147.81498718 23.61931038]
[148.86019897 38.47719574]
[135.65940857 47.19784164]
[128.78601074 60.53037643]
[137.20822144 68.34508514]
[143.57234192 77.91071320]
[147.52635193 88.69816589]
[148.85154724 100.11075592]
[147.47462463 111.51721954]
[143.47174072 122.28662872]
[137.06431580 131.82330322]
[128.60675049 139.59974670]
[118.56686401 145.18580627]
[107.50000000 148.27252197]
[107.50000000 163.27252197]
] def
/pairs [
[1 65]
[2 64]
[10 18]
[11 17]
[22 54]
[23 53]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[32 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

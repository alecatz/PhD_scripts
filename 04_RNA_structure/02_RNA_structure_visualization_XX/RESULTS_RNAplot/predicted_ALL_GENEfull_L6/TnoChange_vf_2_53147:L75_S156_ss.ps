%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGTGATGCTGAACTTCTTGAAGGACTTTGAGACCAAGCTGGAAATCAAAATCACTTGCTCACAAGAGACCGAGCC\
) def
/coor [
[92.50000000 147.20245361]
[92.50000000 132.20245361]
[92.50000000 117.20245361]
[89.20464325 131.83599854]
[81.83435059 144.90040588]
[71.01370239 155.28855896]
[57.65968704 162.12011719]
[42.90396500 164.81616211]
[27.99698639 163.14822388]
[14.20202351 157.25764465]
[2.68810821 147.64360046]
[-5.56903124 135.12083435]
[-9.86965561 120.75056458]
[-9.84931564 105.75057983]
[-5.50973368 91.39202881]
[2.78133750 78.89170074]
[14.32128429 69.30892181]
[28.13217163 63.45577240]
[43.04361725 61.82826233]
[57.79197311 64.56431580]
[71.12741089 71.43207550]
[81.91984558 81.84953308]
[89.25607300 94.93753052]
[84.97603607 80.56111908]
[71.35771179 72.99943542]
[67.22193146 58.35873795]
[74.51477051 45.42234802]
[70.23472595 31.04593658]
[65.95468140 16.66952515]
[61.67463684 2.29311275]
[46.99625015 -2.73923659]
[38.10669708 -15.45755005]
[38.42419815 -30.97137642]
[47.82666397 -43.31533432]
[62.69865417 -47.74291611]
[77.32158661 -42.55163193]
[86.07264709 -29.73763275]
[85.58686829 -14.22816277]
[76.05104828 -1.98693061]
[80.33109283 12.38948154]
[84.61113739 26.76589394]
[88.89118195 41.14230728]
[102.07202911 47.98341751]
[106.61740112 62.50217056]
[99.35244751 76.28107452]
[103.63248444 90.65748596]
[107.12062073 88.89287567]
[111.38339233 88.24504852]
[116.09714508 88.93536377]
[120.88471222 91.09764862]
[125.33787537 94.76659393]
[139.31175232 100.21921539]
[149.12496948 91.95668793]
[161.47926331 88.78416443]
[173.91558838 91.26751709]
[183.98693848 98.85330200]
[189.73973083 109.99056244]
[190.09272766 122.44755554]
[203.56860352 129.03550720]
[217.04446411 135.62344360]
[233.35855103 133.95535278]
[242.73956299 147.40632629]
[235.53710938 162.13916016]
[219.16046143 162.99800110]
[210.45651245 149.09931946]
[196.98065186 142.51136780]
[183.50479126 135.92341614]
[168.57882690 144.91563416]
[151.06973267 143.35084534]
[137.74414062 131.65190125]
[133.85913086 114.19308472]
[119.88526154 108.74046326]
[107.50000000 117.20245361]
[107.50000000 132.20245361]
[107.50000000 147.20245361]
] def
/pairs [
[1 75]
[2 74]
[3 73]
[23 46]
[24 45]
[27 42]
[28 41]
[29 40]
[30 39]
[51 72]
[52 71]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

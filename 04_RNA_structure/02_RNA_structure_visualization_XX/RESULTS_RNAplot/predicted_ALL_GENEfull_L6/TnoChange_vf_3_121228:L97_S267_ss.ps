%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCAGCATGAAGATTAAGGTCGTTGCACCACCTGAAAGGAAGTACAGTGTCTGGATCGGTGGTTCCATTCTTGCTTCCCTCAGCACATTCCAGCAGGT\
) def
/coor [
[92.50000000 127.06957245]
[92.50000000 112.06957245]
[85.79576111 108.70755768]
[65.68302917 98.62151337]
[53.66182709 107.59317017]
[55.47636032 120.17702484]
[51.71666718 132.24607849]
[43.17562485 141.46618652]
[31.56434250 146.08256531]
[19.16961861 145.25358582]
[8.40360832 139.20349121]
[-4.16771269 147.38652039]
[-16.73903465 155.56954956]
[-23.68205643 170.42640686]
[-40.04112244 171.57225037]
[-48.98743057 157.82832336]
[-41.31778336 143.33319092]
[-24.92205811 142.99821472]
[-12.35073662 134.81520081]
[0.22058521 126.63217163]
[0.21386868 109.12278748]
[10.69699383 94.90563202]
[27.72173500 89.64498138]
[44.69017029 95.57196808]
[56.71137619 86.60031128]
[43.78750229 78.98627472]
[33.02724838 68.53558350]
[25.03929710 55.83941650]
[20.27551651 41.61597061]
[19.00538445 26.66984367]
[21.30074883 11.84650707]
[27.03176498 -2.01550770]
[35.87424088 -14.13205147]
[47.32797241 -23.81771278]
[60.74504089 -30.52459335]
[75.36647034 -33.87329483]
[90.36515045 -33.67438507]
[104.89263916 -29.93911934]
[118.12712860 -22.87879562]
[129.31997681 -12.89280224]
[137.83802795 -0.54602784]
[143.19943237 13.46309090]
[145.10089111 28.34208488]
[143.43484497 43.24927521]
[138.29556274 57.34138870]
[129.97372437 69.82125854]
[118.94129181 79.98208618]
[133.66467285 77.11470032]
[148.38806152 74.24732208]
[156.38850403 69.45304108]
[163.62889099 71.53195953]
[178.43663025 69.13796234]
[193.24435425 66.74395752]
[208.05207825 64.34996033]
[217.30372620 51.81821060]
[232.35496521 49.60129929]
[244.24507141 58.49856186]
[247.45167542 43.62104797]
[261.07452393 32.11294937]
[281.51422119 30.98150063]
[294.08554077 22.79847717]
[306.65686035 14.61545372]
[313.59988403 -0.24141338]
[329.95895386 -1.38725162]
[338.90524292 12.35667896]
[331.23559570 26.85180092]
[314.83987427 27.18677521]
[302.26855469 35.36979675]
[289.69723511 43.55282211]
[290.89422607 50.95668411]
[293.28823853 65.76441193]
[294.48522949 73.16827393]
[308.99465942 76.97309113]
[320.91558838 67.03976440]
[336.40066528 66.04406738]
[349.49560547 74.36888123]
[355.16510010 88.81313324]
[351.22912598 103.82272339]
[339.20114136 113.62614441]
[323.70614624 114.45379639]
[310.70230103 105.98742676]
[305.18981934 91.48251343]
[290.68041992 87.67769623]
[261.79162598 90.96369171]
[246.63906860 73.30628967]
[238.15829468 85.49694824]
[223.17526245 88.13574982]
[210.44607544 79.15769196]
[195.63835144 81.55168915]
[180.83062744 83.94568634]
[166.02290344 86.33968353]
[151.25544739 88.97071075]
[136.53205872 91.83808899]
[121.80867004 94.70546722]
[122.31187439 109.69702911]
[107.50000000 112.06957245]
[107.50000000 127.06957245]
] def
/pairs [
[1 97]
[2 96]
[4 25]
[5 24]
[11 20]
[12 19]
[13 18]
[47 94]
[48 93]
[49 92]
[51 91]
[52 90]
[53 89]
[54 88]
[57 85]
[60 69]
[61 68]
[62 67]
[72 83]
[73 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

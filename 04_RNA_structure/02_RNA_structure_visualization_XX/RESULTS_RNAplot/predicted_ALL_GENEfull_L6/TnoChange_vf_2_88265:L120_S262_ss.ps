%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GTCATTGCTATGTGATCCTAATCCGAATTCTCCTGCAAATTCGGAAGCTGCACGAATGTTCAGTGAAAGCAAGCGCGAGTACAACAGAAGAGTCCGCGAGGTTGTCGAACAAAGCTGGAC\
) def
/coor [
[47.41716385 526.69592285]
[47.41716385 511.69592285]
[47.41716385 496.69592285]
[37.07485199 488.89355469]
[33.09139633 476.36071777]
[37.14972305 463.64672852]
[47.96974182 455.50454712]
[48.35914993 440.50961304]
[48.74856186 425.51464844]
[41.34427643 412.59082031]
[49.43722916 398.99615479]
[49.82664108 384.00122070]
[50.21604919 369.00625610]
[42.97645187 363.51040649]
[39.08348846 355.14361572]
[39.55604935 345.78860474]
[44.41410065 337.61804199]
[52.64419174 332.58987427]
[54.19920731 317.67068481]
[55.75422287 302.75149536]
[53.72079086 299.73123169]
[53.11988449 295.54089355]
[54.50087738 290.89892578]
[58.05517960 286.74801636]
[60.76637268 271.99505615]
[63.47756195 257.24209595]
[58.16810226 243.32597351]
[68.27229309 231.15158081]
[70.98348999 216.39863586]
[73.69467926 201.64569092]
[68.38522339 187.72955322]
[78.48941040 175.55516052]
[69.84934235 163.47688293]
[72.38871002 148.47666931]
[85.11609650 139.49606323]
[87.82729340 124.74311829]
[73.89414215 108.88147736]
[75.26354980 87.81375885]
[91.13280487 73.88928223]
[90.35424805 58.90950394]
[89.57569122 43.92972183]
[88.79712677 28.94994164]
[69.05216217 20.00873756]
[62.26400375 -5.96853399]
[46.53020859 -7.45959711]
[36.52360535 -19.69248009]
[38.18093109 -35.40962982]
[50.51892853 -45.28634262]
[66.21767426 -43.46293640]
[75.96339417 -31.02120781]
[73.97411346 -15.34261417]
[81.24712372 -17.17381859]
[95.79314423 -20.83622742]
[103.06615448 -22.66743088]
[94.36331177 -35.58633804]
[97.32300568 -50.50930405]
[109.69284058 -58.72652435]
[112.40402985 -73.47946930]
[115.11522675 -88.23241425]
[117.82641602 -102.98536682]
[120.53760529 -117.73831177]
[112.65111542 -131.70909119]
[118.79013062 -146.53109741]
[134.24533081 -150.83416748]
[147.16079712 -141.31733704]
[147.62890625 -125.28112030]
[135.29055786 -115.02712250]
[132.57936096 -100.27416992]
[129.86817932 -85.52122498]
[127.15698242 -70.76828003]
[124.44578552 -56.01533127]
[133.08586121 -43.93705750]
[130.54649353 -28.93685150]
[117.81909943 -19.95623970]
[125.77885437 1.44692194]
[118.81109619 20.12382126]
[103.77690887 28.17138481]
[104.55546570 43.15116501]
[105.33402252 58.13094711]
[106.11258698 73.11072540]
[115.50553131 77.19703674]
[122.75891113 84.42987823]
[133.19317627 71.77847290]
[149.31982422 74.75559998]
[154.54913330 90.29864502]
[143.50164795 102.41825867]
[127.54206848 98.64682007]
[126.67562103 106.98626709]
[123.34306335 114.67984772]
[117.85249329 121.01630402]
[110.71149445 125.40985107]
[102.58023834 127.45430756]
[99.86904144 142.20726013]
[108.57189178 155.12615967]
[105.61219788 170.04913330]
[93.24236298 178.26634216]
[98.35789490 193.23771667]
[88.44762421 204.35687256]
[85.73643494 219.10981750]
[83.02524567 233.86277771]
[88.14077759 248.83413696]
[78.23050690 259.95330811]
[75.51931763 274.70623779]
[72.80812836 289.45919800]
[70.67340088 304.30651855]
[69.11838531 319.22570801]
[67.56336975 334.14486694]
[77.61080933 352.98095703]
[65.21099854 369.39569092]
[64.82158661 384.39062500]
[64.43217468 399.38555908]
[71.80860901 413.38195801]
[63.74350739 425.90408325]
[63.35409546 440.89901733]
[62.96468735 455.89395142]
[75.22272491 468.29278564]
[74.79034424 485.38647461]
[62.41716385 496.69592285]
[62.41716385 511.69592285]
[62.41716385 526.69592285]
] def
/pairs [
[1 120]
[2 119]
[3 118]
[7 115]
[8 114]
[9 113]
[11 111]
[12 110]
[13 109]
[18 107]
[19 106]
[20 105]
[24 104]
[25 103]
[26 102]
[28 100]
[29 99]
[30 98]
[32 96]
[35 93]
[36 92]
[39 80]
[40 79]
[41 78]
[42 77]
[44 51]
[54 74]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CATCTCCAGCAGTACAAATGTGACAAGAGCTATGAGGAGCCCAAGCAATGGCATTGACACTAGCTTGATG\
) def
/coor [
[86.52581024 234.02296448]
[86.52581024 219.02296448]
[86.52581024 204.02296448]
[86.52581024 189.02296448]
[76.61647034 182.65141296]
[71.08936310 172.10955811]
[71.49292755 160.09149170]
[77.84220123 149.73623657]
[88.58357239 143.80795288]
[89.90927887 128.86665344]
[77.21473694 120.39456177]
[70.19583130 106.84234619]
[55.19950104 106.51051331]
[46.22720718 109.52258301]
[39.55117035 105.81765747]
[24.58419609 104.82281494]
[10.11644840 112.54396820]
[-3.65921831 103.64660645]
[-2.57157826 87.28356934]
[12.26049709 80.28774261]
[25.57904053 89.85584259]
[40.54601288 90.85068512]
[55.53133392 91.51418304]
[70.52766418 91.84601593]
[79.30480957 77.48744202]
[94.34970856 69.94703674]
[111.10586548 71.50849152]
[102.43777466 57.80084229]
[99.73312378 41.85523224]
[103.37599945 26.14366913]
[112.76917267 13.08831787]
[126.43168640 4.68809080]
[142.23226929 2.21262836]
[145.52384949 -12.42176628]
[144.34603882 -21.81258011]
[149.29827881 -27.62387085]
[144.59143066 -43.33302307]
[156.03785706 -55.07659531]
[171.86245728 -50.77380371]
[175.78623962 -34.85099411]
[163.77276611 -23.68818665]
[160.15824890 -9.13018894]
[156.86666870 5.50420618]
[166.51106262 11.36973095]
[174.16836548 19.66335869]
[187.86254883 13.54210377]
[197.03868103 -0.04945236]
[213.37617493 1.37129986]
[220.06838989 16.34281158]
[210.23097229 29.46367645]
[193.98379517 27.23627281]
[180.28962708 33.35752487]
[181.12324524 48.44472504]
[176.37782288 62.83522034]
[166.67898560 74.53259277]
[153.34182739 81.90214539]
[138.19259644 83.89929199]
[123.31867218 80.21753693]
[129.38412476 91.53362274]
[130.26965332 104.34219360]
[125.81913757 116.38530731]
[116.81714630 125.53996277]
[104.85057831 130.19235229]
[103.52487946 145.13365173]
[116.20862579 158.85531616]
[115.18617249 177.20217896]
[101.52581024 189.02296448]
[101.52581024 204.02296448]
[101.52581024 219.02296448]
[101.52581024 234.02296448]
] def
/pairs [
[1 70]
[2 69]
[3 68]
[4 67]
[9 64]
[10 63]
[12 24]
[13 23]
[15 22]
[16 21]
[27 58]
[33 43]
[34 42]
[36 41]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

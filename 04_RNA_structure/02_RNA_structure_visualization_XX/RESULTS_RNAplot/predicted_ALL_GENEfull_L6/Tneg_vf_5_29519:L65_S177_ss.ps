%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCTTCGAAACGGATCTTGAAGGAGCTGAAGGATCTCCAGAAAGACCCTCCAACCTCCTGCAGTGC\
) def
/coor [
[92.50000000 194.58631897]
[92.50000000 179.58631897]
[82.15995789 177.92280579]
[72.12613678 174.92181396]
[62.57073975 170.63485718]
[53.65779114 165.13548279]
[45.54027557 158.51811218]
[38.35752106 150.89633179]
[32.23281097 142.40093994]
[27.27127838 133.17776489]
[23.55808067 123.38513184]
[21.15695190 113.19110107]
[20.10910606 102.77066040]
[20.43252945 92.30265808]
[5.70359898 89.46389008]
[-9.02533150 86.62512207]
[-24.33712959 92.49716187]
[-36.90628433 81.96395111]
[-33.80272293 65.86116028]
[-18.21912766 60.75395203]
[-6.18656301 71.89618683]
[8.54236794 74.73495483]
[23.27129745 77.57372284]
[31.84647369 58.22287369]
[45.19957352 41.80081940]
[62.39447403 29.45883560]
[82.22572327 22.06216240]
[103.30303955 20.12934494]
[124.14879608 23.79588509]
[143.30158997 32.80473709]
[152.57397461 21.01394272]
[161.84637451 9.22314548]
[162.99409485 -11.91492653]
[181.74969482 -19.98790932]
[189.24969482 -32.97829056]
[184.91766357 -48.17727280]
[192.67466736 -61.94697189]
[207.91859436 -66.11806488]
[221.60551453 -58.21591949]
[225.61520386 -42.92873764]
[217.56880188 -29.32613373]
[202.24008179 -25.47829056]
[194.74008179 -12.48790932]
[198.62059021 -3.81427455]
[197.84535217 5.79779339]
[192.46992493 13.97337055]
[183.70306396 18.62735748]
[173.63716125 18.49553108]
[164.36477661 30.28632736]
[155.09239197 42.07712173]
[163.77996826 51.80927277]
[170.76892090 62.82486725]
[175.87310791 74.83053589]
[178.95660400 87.50653076]
[179.93725586 100.51525879]
[178.78898621 113.51026917]
[175.54234314 126.14546204]
[170.28381348 138.08433533]
[163.15344238 149.00891113]
[154.34112549 158.62826538]
[144.08155823 166.68618774]
[132.64799500 172.96807861]
[120.34491730 177.30664062]
[107.50000000 179.58631897]
[107.50000000 194.58631897]
] def
/pairs [
[1 65]
[2 64]
[14 23]
[15 22]
[16 21]
[30 50]
[31 49]
[32 48]
[34 43]
[35 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

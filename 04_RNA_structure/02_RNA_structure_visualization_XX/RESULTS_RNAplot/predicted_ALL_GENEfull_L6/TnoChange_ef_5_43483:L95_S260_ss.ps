%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:20:13 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGCGATGATTCCACTGATTGTTCCATGGCTTTTCTTTATCTGCTTTGTTCTATTAGTATAAGGACTAATCTGCAGAAGTTCTTGGGTTTCTCTCC\
) def
/coor [
[92.50000000 160.57514954]
[92.50000000 145.57514954]
[92.50000000 130.57514954]
[83.40647888 126.75340271]
[75.94198608 120.30520630]
[70.83933258 111.86359406]
[68.59945679 102.25730133]
[69.44226074 92.42940521]
[73.28499603 83.34473419]
[79.75041199 75.89514923]
[63.33208084 75.01993561]
[49.64235687 66.08335114]
[42.31862259 51.57146072]
[43.25072479 35.43636322]
[52.09422684 22.02001762]
[45.02327728 8.79119968]
[32.96451569 7.57387638]
[23.14395332 0.67962593]
[18.00708199 -10.02993679]
[18.76185036 -21.76236343]
[25.09678459 -31.52222252]
[18.90617943 -45.18518066]
[7.02662420 -50.52678680]
[2.20244431 -62.19024658]
[6.55169392 -73.60827637]
[0.81144226 -87.46646881]
[-4.92880917 -101.32466125]
[-12.78298473 -88.54530334]
[-27.30024147 -84.77049255]
[-40.38457489 -92.10535431]
[-44.73908997 -106.45938873]
[-37.93535233 -119.82760620]
[-23.76768684 -124.75479889]
[-10.13666534 -118.49266052]
[-13.06302071 -133.20443726]
[-21.70423698 -135.27882385]
[-29.26608467 -139.88142395]
[-35.03320312 -146.55223083]
[-38.46757507 -154.63684082]
[-39.25867081 -163.35055542]
[-37.35142136 -171.85455322]
[-32.94949341 -179.33666992]
[-26.49376869 -185.08891296]
[-18.61826324 -188.57450867]
[-18.61826324 -203.57450867]
[-28.90003204 -215.88973999]
[-25.54114914 -231.57722473]
[-11.11826229 -238.60289001]
[3.30462432 -231.57722473]
[6.66350651 -215.88973999]
[-3.61826253 -203.57450867]
[-3.61826253 -188.57450867]
[13.58738136 -175.19325256]
[15.94663906 -153.26385498]
[1.64875877 -136.13079834]
[4.57511377 -121.41902161]
[8.92938423 -107.06491089]
[14.66963482 -93.20671844]
[20.40988731 -79.34852600]
[34.87015533 -69.55397797]
[32.56913757 -51.37578583]
[38.75974274 -37.71282959]
[56.15010452 -32.47522736]
[64.50798035 -15.99774265]
[58.25209427 1.72024858]
[65.32304382 14.94906712]
[79.07677460 14.51091862]
[91.72121429 20.10655212]
[100.73217773 30.68202591]
[104.28352356 44.18312836]
[101.61706543 57.95427322]
[93.20350647 69.26081848]
[115.84494019 72.79655457]
[130.09082031 90.74623108]
[128.39285278 113.59909058]
[139.98800659 123.11499023]
[151.58317566 132.63088989]
[165.92918396 127.14569855]
[181.09326172 129.58422852]
[192.99632263 139.29055786]
[198.43652344 153.65368652]
[195.95046997 168.81004333]
[186.20689392 180.68263245]
[171.82676697 186.07777405]
[156.67828369 183.54421997]
[144.83628845 173.76347351]
[139.48625183 159.36651611]
[142.06727600 144.22604370]
[130.47210693 134.71014404]
[118.87696075 125.19424438]
[115.33742523 127.49278259]
[111.52224731 129.29722595]
[107.50000000 130.57514954]
[107.50000000 145.57514954]
[107.50000000 160.57514954]
] def
/pairs [
[1 95]
[2 94]
[3 93]
[10 72]
[15 66]
[16 65]
[21 62]
[22 61]
[25 59]
[26 58]
[27 57]
[34 56]
[35 55]
[44 52]
[45 51]
[75 90]
[76 89]
[77 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

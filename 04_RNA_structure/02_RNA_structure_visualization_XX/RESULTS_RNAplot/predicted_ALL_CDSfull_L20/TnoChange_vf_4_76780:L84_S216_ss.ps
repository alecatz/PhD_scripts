%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GTGCCACGGGTGAGCTTTGATTTGAGGAAACTTGAACTCTGTGTAATTCGGATTCATACACCGTATTTCTTCTCTTGTAGGCGT\
) def
/coor [
[92.47841644 181.05963135]
[81.79753876 170.74194336]
[81.58386230 155.52981567]
[92.47841644 144.39668274]
[92.47841644 129.39668274]
[80.54090118 120.56366730]
[74.93955994 107.90818024]
[76.24518585 95.14405060]
[83.13903046 85.53805542]
[75.71919250 72.50172424]
[68.29935455 59.46538925]
[60.87951279 46.42905426]
[47.75034332 47.57129669]
[35.23537445 43.59505844]
[25.24535179 35.14556503]
[19.29082680 23.54805946]
[18.25380898 10.60002422]
[22.25729561 -1.70737553]
[30.65194130 -11.49549961]
[24.21513367 -25.04420662]
[17.77832413 -38.59291458]
[11.34151459 -52.14162445]
[4.90470552 -65.69033051]
[-5.20072937 -76.77546692]
[-18.09772682 -84.43493652]
[-30.99472427 -92.09439850]
[-47.39036560 -91.75527954]
[-55.64923859 -105.92295837]
[-47.27532196 -120.02294159]
[-30.88298416 -119.55037689]
[-23.33525658 -104.99140167]
[-10.43825912 -97.33193207]
[2.45873880 -89.67246246]
[15.21199608 -97.56894684]
[14.10420799 -112.52798462]
[12.99641991 -127.48702240]
[11.88863182 -142.44606018]
[10.78084373 -157.40509033]
[-1.35142994 -167.53344727]
[-2.68518758 -183.28135681]
[7.57086611 -195.30586243]
[23.33199692 -196.47305298]
[35.24740219 -186.09043884]
[36.24789047 -170.31785583]
[25.73988152 -158.51287842]
[26.84766960 -143.55384827]
[27.95545769 -128.59480286]
[29.06324577 -113.63577271]
[30.17103386 -98.67673492]
[18.45341301 -72.12714386]
[24.89022255 -58.57843399]
[31.32703209 -45.02972412]
[37.76383972 -31.48101616]
[44.20064926 -17.93230820]
[61.20283890 -17.27697945]
[75.68236542 -8.17602921]
[83.72727203 7.01470804]
[83.11279297 24.28062630]
[73.91584778 39.00921631]
[81.33568573 52.04555130]
[88.75552368 65.08188629]
[96.17536163 78.11821747]
[119.91629028 82.85630798]
[128.78042603 109.61385345]
[141.38558960 117.74465179]
[153.99075317 125.87545013]
[167.61724854 118.78926086]
[182.96052551 119.48171997]
[195.89331055 127.76656342]
[202.93675232 141.41520691]
[202.19621277 156.75624084]
[193.87086487 169.66299438]
[180.20021057 176.66362000]
[164.86158752 175.87498474]
[151.98098755 167.50923157]
[145.02323914 153.81669617]
[145.85995483 138.48062134]
[133.25479126 130.34980774]
[120.64963531 122.21901703]
[107.47841644 129.39668274]
[107.47841644 144.39668274]
[118.37297058 155.52981567]
[118.15928650 170.74194336]
[107.47841644 181.05963135]
] def
/pairs [
[1 84]
[4 81]
[5 80]
[9 62]
[10 61]
[11 60]
[12 59]
[19 54]
[20 53]
[21 52]
[22 51]
[23 50]
[24 33]
[25 32]
[26 31]
[34 49]
[35 48]
[36 47]
[37 46]
[38 45]
[64 79]
[65 78]
[66 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

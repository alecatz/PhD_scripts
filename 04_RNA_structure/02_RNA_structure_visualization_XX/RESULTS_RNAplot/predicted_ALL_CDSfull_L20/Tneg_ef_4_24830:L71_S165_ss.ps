%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAGCTACAGCTACGAAATTGCAGAGACCGTAAACGTGAGGGTTACAAGGCATAAGAGGAAGCGATCTCCAA\
) def
/coor [
[92.50000000 149.29721069]
[85.26271057 147.63693237]
[78.35221100 144.92034912]
[71.92173004 141.20770264]
[66.11385345 136.58132935]
[61.05736542 131.14379883]
[48.06698608 138.64379883]
[47.43564987 154.05822754]
[38.55216980 166.67121887]
[24.25123024 172.45797729]
[9.09620953 169.57200623]
[-2.07697964 158.93417358]
[-5.70301437 143.93899536]
[-0.62483913 129.37136841]
[11.53711796 119.87977600]
[26.90202141 118.49294281]
[40.56698608 125.65341187]
[53.55736542 118.15341187]
[50.18587112 102.23990631]
[52.11553955 86.08802795]
[59.14101791 71.41664886]
[70.51466370 59.78707504]
[85.02610016 52.43691635]
[101.13105011 50.14836884]
[117.11563110 53.16497421]
[131.27879333 61.16571045]
[127.95030212 54.71116638]
[125.76396179 47.79148102]
[124.78113556 40.60688400]
[125.02838135 33.36495972]
[126.49674988 26.27462387]
[129.14208984 19.54012489]
[132.88638306 13.35513687]
[137.62002563 7.89720631]
[143.20501709 3.32264733]
[149.47908020 -0.23793334]
[156.26022339 -2.68336391]
[163.35217285 -3.94478202]
[170.54994202 -3.98757291]
[177.64581299 -2.81231666]
[184.43530273 -0.45471883]
[190.72306824 3.01547122]
[196.32856750 7.49652290]
[201.09115601 12.85770512]
[204.87475586 18.94310188]
[207.57170105 25.57614517]
[209.10588074 32.56473541]
[215.49833679 18.77325630]
[226.68536377 8.48155975]
[240.96099854 3.25905275]
[256.14831543 3.90213060]
[269.93139648 10.31272793]
[280.20834351 21.51327705]
[285.41207886 35.79577255]
[284.74902344 50.98223877]
[278.32031250 64.75685120]
[267.10623169 75.01908112]
[252.81690979 80.20401001]
[237.63133240 79.52098083]
[223.86518860 73.07414246]
[213.61772156 61.84659576]
[208.45158386 47.55046082]
[194.03857422 71.13071442]
[167.99163818 80.79171753]
[141.41264343 72.22486877]
[148.24339294 87.38890076]
[149.70730591 103.95586395]
[145.64151001 120.08274841]
[136.49833679 133.97552490]
[123.29488373 144.08869934]
[107.50000000 149.29721069]
] def
/pairs [
[1 71]
[6 18]
[7 17]
[26 65]
[47 62]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

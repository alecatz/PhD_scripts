%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GTAGGAACAGCTAGCAAGTGGCGGAGATCAGATTTGTTACCAACCAGCATCACTAC\
) def
/coor [
[92.50000000 174.97560120]
[92.50000000 159.97560120]
[92.50000000 144.97560120]
[92.50000000 129.97560120]
[80.18312073 123.70818329]
[71.83021545 112.69841766]
[69.11210632 99.14858246]
[72.57251740 85.76905823]
[81.51924133 75.23615265]
[94.16267395 69.65676117]
[94.98899078 54.67953491]
[80.90958405 49.18157196]
[69.23468781 39.61395264]
[61.09969711 26.92339516]
[57.29069519 12.35951519]
[58.16854095 -2.64821482]
[63.63469696 -16.63077736]
[73.14212799 -28.22339821]
[85.75001526 -36.29875565]
[100.21683502 -40.07659912]
[101.04315186 -55.05382156]
[101.86946869 -70.03104401]
[102.69578552 -85.00826263]
[103.52210236 -99.98548889]
[90.96295929 -108.94492340]
[85.26259613 -123.28051758]
[88.23997498 -138.41784668]
[98.94503784 -149.52664185]
[113.96182251 -153.06211853]
[128.49853516 -147.89613342]
[137.91656494 -135.67710876]
[139.21064758 -120.30412292]
[131.96784973 -106.68261719]
[118.49932098 -99.15917206]
[117.67300415 -84.18195343]
[116.84668732 -69.20472717]
[116.02037811 -54.22750473]
[115.19406128 -39.25028229]
[129.15748596 -33.90389633]
[140.80049133 -24.49058151]
[148.97492981 -11.92242527]
[152.86972046 2.57659483]
[152.09126282 17.58980942]
[146.70323181 31.64627266]
[137.22154236 43.36489105]
[124.56499481 51.59011078]
[109.96621704 55.50585175]
[109.13990021 70.48307800]
[122.58186340 78.90862274]
[130.07138062 92.89374542]
[129.63424683 108.75202942]
[121.38569641 122.30332947]
[107.50000000 129.97560120]
[107.50000000 144.97560120]
[107.50000000 159.97560120]
[107.50000000 174.97560120]
] def
/pairs [
[1 56]
[2 55]
[3 54]
[4 53]
[10 48]
[11 47]
[20 38]
[21 37]
[22 36]
[23 35]
[24 34]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

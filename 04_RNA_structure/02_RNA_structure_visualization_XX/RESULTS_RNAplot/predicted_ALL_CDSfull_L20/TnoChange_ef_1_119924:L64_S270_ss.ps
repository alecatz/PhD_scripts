%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GATGGGAGTGATGAGACCTGAACTTGTTATGAAATCGATTGTTCCTGTTGTCATGGCTGGTGTG\
) def
/coor [
[92.50000000 142.52856445]
[92.50000000 127.52855682]
[82.23928070 122.32999420]
[74.86513519 113.50222778]
[71.57604980 102.48001099]
[72.90657806 91.05472565]
[78.64048004 81.08327484]
[70.42028809 68.53622437]
[64.04841614 82.11559296]
[50.09690857 87.62516785]
[36.16607666 82.06352234]
[29.84496498 68.46044922]
[34.57710266 54.22644806]
[47.78458023 47.11571121]
[62.27264023 51.00210571]
[57.98345566 36.62841797]
[45.43999863 35.25851822]
[34.19853592 29.60611534]
[25.66639519 20.40662575]
[20.90199661 8.83774948]
[20.48357964 -3.63125944]
[24.43913460 -15.42618465]
[32.24600220 -25.06658936]
[42.89979553 -31.35163116]
[40.73246002 -46.19422531]
[38.56512451 -61.03682327]
[24.47565460 -67.32096863]
[16.03942680 -80.23737335]
[15.94840717 -95.66446686]
[24.23164177 -108.67951965]
[38.24597931 -115.12947083]
[53.51949310 -112.95616913]
[65.17846680 -102.85310364]
[69.50255585 -88.04412842]
[65.11196899 -73.25473785]
[53.40771866 -63.20415878]
[55.57505417 -48.36156464]
[57.74238968 -33.51896667]
[74.53889465 -27.94657516]
[86.48780060 -14.78305912]
[90.44921875 2.63116813]
[85.32398987 19.82381058]
[72.35713959 32.33923340]
[76.64632416 46.71292114]
[82.96734619 60.31603622]
[91.18753052 72.86309052]
[111.81597137 74.02973938]
[126.24819946 88.81501770]
[126.91604614 109.46562195]
[140.43864441 102.29638672]
[155.74406433 102.24420166]
[169.31523132 109.32106018]
[178.03359985 121.90075684]
[179.89573669 137.09255981]
[174.47375488 151.40551758]
[163.01356506 161.55061340]
[148.14865112 165.19656372]
[133.29486084 161.50556946]
[121.86547852 151.32579041]
[116.48690033 136.99647522]
[118.39507294 121.81038666]
[113.25945282 125.26377869]
[107.50000000 127.52855682]
[107.50000000 142.52856445]
] def
/pairs [
[1 64]
[2 63]
[7 46]
[8 45]
[15 44]
[16 43]
[24 38]
[25 37]
[26 36]
[49 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
TGCGTCATATGTGATTCCTATGTCCGCCCGTGTACTCTGGTTAGGATTTGCGATGAATGCA\
) def
/coor [
[96.05844879 339.15570068]
[96.05844879 324.15570068]
[96.05844879 309.15570068]
[96.05844879 294.15570068]
[96.05844879 279.15570068]
[83.09112549 271.82672119]
[75.48273468 258.90509033]
[75.36289215 243.81031799]
[82.86393738 230.59552002]
[96.05844879 222.85910034]
[96.05844879 207.85910034]
[96.05844879 192.85910034]
[96.05844879 177.85910034]
[95.67845917 162.86390686]
[94.91872406 147.88316345]
[94.15898132 132.90242004]
[93.39924622 117.92166901]
[82.71846771 108.13049316]
[81.98458862 93.65956879]
[91.62001038 82.83806610]
[90.86026764 67.85731506]
[88.58885193 53.03029251]
[84.82906342 38.50913620]
[73.87971497 27.08888054]
[78.17989349 12.82852554]
[74.42010498 -1.69263172]
[62.54293823 -13.00036812]
[66.65961456 -28.87440300]
[82.53525543 -32.98488998]
[93.83835602 -21.10331345]
[88.94126129 -5.45241976]
[92.70104980 9.06873703]
[103.38147736 19.45034409]
[99.35021973 34.74934769]
[103.11000824 49.27050400]
[105.91795349 50.78387070]
[108.15830231 53.72158432]
[109.18758392 57.81193161]
[108.50200653 62.51596832]
[105.84101868 67.09757996]
[106.60075378 82.07833099]
[117.28153229 91.86950684]
[118.01541138 106.34043121]
[108.37998962 117.16193390]
[109.13973236 132.14268494]
[109.89946747 147.12342834]
[110.65920258 162.10417175]
[114.33691406 170.90356445]
[111.05844879 177.85910034]
[111.05844879 192.85910034]
[111.05844879 207.85910034]
[111.05844879 222.85910034]
[124.25296021 230.59552002]
[131.75399780 243.81031799]
[131.63417053 258.90509033]
[124.02577209 271.82672119]
[111.05844879 279.15570068]
[111.05844879 294.15570068]
[111.05844879 309.15570068]
[111.05844879 324.15570068]
[111.05844879 339.15570068]
] def
/pairs [
[1 61]
[2 60]
[3 59]
[4 58]
[5 57]
[10 52]
[11 51]
[12 50]
[13 49]
[14 47]
[15 46]
[16 45]
[17 44]
[20 41]
[21 40]
[22 35]
[23 34]
[25 32]
[26 31]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

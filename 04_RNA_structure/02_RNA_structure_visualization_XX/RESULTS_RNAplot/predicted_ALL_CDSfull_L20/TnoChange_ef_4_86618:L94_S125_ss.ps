%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
TGCAAACCCACGTCAGTTCAAGATCCCAGACTGGTTCTTGAACAGGCAGAAGGATTACAAAGATGGCAAGTATTCTCAAGTTGTCTCCAATGCT\
) def
/coor [
[98.42601776 155.59020996]
[98.42601776 140.59020996]
[93.73537445 135.06901550]
[90.51726532 129.12265015]
[96.40198517 143.48056030]
[92.69075775 158.54730225]
[80.81062317 168.52938843]
[65.32973480 169.58850098]
[52.20081329 161.31741333]
[46.47219467 146.89651489]
[50.34664536 131.87092590]
[62.33436966 122.01830292]
[77.82583618 121.12717438]
[70.19078827 107.03294373]
[70.72077942 91.01232147]
[79.27062225 77.45351410]
[72.13140869 64.26140594]
[57.94200897 64.62006378]
[45.06111908 58.89210129]
[35.94946671 48.26277542]
[32.30848312 34.84469604]
[17.55590820 32.13148880]
[6.40820312 42.92539215]
[-8.95966911 45.07204437]
[-22.63844872 37.74602127]
[-29.36836433 23.76432419]
[-26.56162834 8.50320148]
[-15.29748535 -2.16913271]
[0.09276982 -4.14894915]
[13.69127083 3.32503247]
[20.26911545 17.37891388]
[35.02169037 20.09212112]
[36.95691299 13.55944729]
[40.40434265 7.31320286]
[45.31925583 1.70595908]
[51.57475662 -2.91802454]
[49.10583878 -17.71344376]
[46.63691711 -32.50886536]
[44.16799927 -47.30428314]
[29.60993385 -52.02882767]
[18.92331123 -62.98577499]
[14.56383991 -77.65729523]
[17.53329277 -92.67198944]
[27.14931297 -104.57958221]
[41.20220947 -110.64379883]
[56.46272659 -109.47112274]
[69.42411041 -101.33103180]
[77.10793304 -88.09406281]
[77.74850464 -72.80196381]
[71.19863129 -58.96875381]
[58.96341705 -49.77320099]
[61.43233871 -34.97778320]
[63.90125656 -20.18236351]
[66.37017822 -5.38694334]
[80.84831238 -1.46474433]
[90.44783783 -12.99076080]
[95.93836975 -29.03103447]
[112.87171173 -28.19546509]
[116.75641632 -11.69257259]
[101.97385406 -3.39123297]
[92.37432861 8.13478374]
[98.81699371 35.20965576]
[85.32351685 57.12219238]
[92.46273041 70.31430054]
[113.74038696 68.94534302]
[132.91909790 82.48278046]
[139.99182129 107.12010956]
[154.64662170 110.31960297]
[159.15974426 108.65749359]
[163.50070190 108.65583801]
[167.13053894 110.02671051]
[169.67494202 112.32665253]
[170.96284485 115.03066254]
[185.06762695 120.13506317]
[201.10864258 116.72658539]
[211.87840271 129.09365845]
[206.29788208 144.51409912]
[190.10784912 147.12467957]
[179.96322632 134.23985291]
[165.85844421 129.13545227]
[151.44712830 124.97441101]
[136.79232788 121.77491760]
[130.95075989 126.47873688]
[142.27763367 136.31243896]
[156.93125916 139.51728821]
[165.47523499 151.84613037]
[163.33093262 166.69207764]
[151.64743042 176.09930420]
[136.68583679 175.02658081]
[126.46392059 164.04876709]
[126.45897675 149.05012512]
[119.26759338 135.88638306]
[113.42601776 140.59020996]
[113.42601776 155.59020996]
] def
/pairs [
[1 94]
[2 93]
[4 13]
[16 64]
[17 63]
[21 32]
[22 31]
[36 54]
[37 53]
[38 52]
[39 51]
[55 61]
[56 60]
[67 82]
[68 81]
[73 80]
[74 79]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCAGCCGAGCTCTGCCCGCCTAGAATCCAGAAACATATCGACTCTAGAGTTAATGAGATCATTAGAAAAGGTTGGC\
) def
/coor [
[13.58410072 264.72406006]
[7.07584524 278.23858643]
[12.53158283 293.07135010]
[5.82528687 307.38223267]
[-9.06431580 312.68084717]
[-23.30348778 305.82360840]
[-28.44438171 290.87881470]
[-21.43699646 276.71295166]
[-6.43868780 271.73034668]
[0.06956808 258.21582031]
[-4.25651169 248.57899475]
[-2.37122273 237.95860291]
[5.31890535 230.07998657]
[16.32789040 227.84919739]
[23.91604996 214.91012573]
[31.50420952 201.97103882]
[27.51031303 187.66773987]
[35.02146530 174.43757629]
[50.05116272 170.34538269]
[57.63932037 157.40631104]
[49.60757065 150.50262451]
[42.68635559 142.48596191]
[37.02819824 133.53302002]
[32.75779724 123.84108734]
[29.96925926 113.62374878]
[28.72403717 103.10617065]
[29.04957390 92.52014160]
[30.93869591 82.09895325]
[34.34976959 72.07226562]
[39.20762253 62.66103745]
[45.40520096 54.07267380]
[52.80592346 46.49644470]
[61.24669647 40.09931183]
[70.54150391 35.02225113]
[80.48550415 31.37714958]
[90.85956573 29.24433899]
[101.43505096 28.67082024]
[111.97891998 29.66923332]
[122.25879669 32.21757507]
[132.04814148 36.25968552]
[140.15776062 23.64088249]
[148.26736450 11.02208042]
[144.66343689 -4.36581326]
[153.06684875 -17.75082016]
[168.49197388 -21.19185638]
[181.78739929 -12.64741135]
[185.06515503 2.81324315]
[176.38061523 16.01757622]
[160.88616943 19.13169289]
[152.77656555 31.75049591]
[144.66694641 44.36929703]
[152.33688354 51.51534653]
[158.87684631 59.70820236]
[164.14561462 68.77098083]
[168.02944946 78.50801086]
[170.44448853 88.70906067]
[171.33859253 99.15389252]
[170.69245911 109.61698914]
[168.52005005 119.87245178]
[182.40733337 125.54195404]
[198.57284546 122.78366089]
[208.83470154 135.57531738]
[202.63636780 150.75796509]
[186.35417175 152.71299744]
[176.73783875 139.42924500]
[162.85054016 133.75973511]
[146.07739258 154.46820068]
[122.87522125 167.57688904]
[96.48133850 171.25679016]
[70.57839966 164.99446106]
[62.99024200 177.93354797]
[66.75594330 193.04835510]
[58.87615204 206.06231689]
[44.44329071 209.55920410]
[36.85512924 222.49827576]
[29.26697159 235.43736267]
] def
/pairs [
[1 10]
[2 9]
[14 76]
[15 75]
[16 74]
[19 71]
[20 70]
[40 51]
[41 50]
[42 49]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

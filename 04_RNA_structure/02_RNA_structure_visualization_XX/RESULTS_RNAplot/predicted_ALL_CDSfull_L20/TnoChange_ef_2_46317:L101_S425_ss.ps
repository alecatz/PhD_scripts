%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CCTTTAGGAGAATTGTAAGTCCCTTTAATGAAATGAAAGGCAGATCCTCCAACAGCTCCCATACCAAAAGCACCACCGATATCATCGAGTATACGATCAGG\
) def
/coor [
[92.50000000 134.93354797]
[92.50000000 119.93354797]
[84.60351562 107.18029022]
[70.88272858 114.18359375]
[55.84487152 111.79273987]
[45.22394562 101.13159943]
[42.94459915 86.43661499]
[29.51714897 79.75054169]
[16.08969879 73.06446075]
[2.66225028 66.37838745]
[-23.91142273 78.57356262]
[-51.04516983 57.43138123]
[-65.86765289 59.73225403]
[-80.69013214 62.03313065]
[-87.40502930 73.82852173]
[-99.53475189 79.46927643]
[-112.49684906 77.07431030]
[-121.53755951 67.75242615]
[-127.45026398 81.92759705]
[-139.66813660 91.23453522]
[-154.90461731 93.16973114]
[-169.06118774 87.21262360]
[-178.32978821 74.96564484]
[-180.21722412 59.72316360]
[-174.21575928 45.58533478]
[-161.93978882 36.35516739]
[-146.69146729 34.51552963]
[-132.57252502 40.56126785]
[-123.38088226 52.86611557]
[-113.70442200 39.20754242]
[-96.82426453 36.63991928]
[-82.99100494 47.21064758]
[-68.16852570 44.90977097]
[-53.34604263 42.60889816]
[-49.30007553 36.29382706]
[-64.21994019 37.84221268]
[-74.73301697 27.14289665]
[-72.92289734 12.25251484]
[-60.15262222 4.38358927]
[-46.03825760 9.46145535]
[-41.20813751 23.66368103]
[-37.16216660 17.34860992]
[-51.77828979 12.13817787]
[-60.51256180 -0.68727088]
[-60.00647354 -16.19609070]
[-50.45463181 -28.42482376]
[-35.52991104 -32.67127228]
[-20.97117043 -27.30259323]
[-12.37654591 -14.38314819]
[-13.05084324 1.11926961]
[-22.73478317 13.24366474]
[-9.36682510 15.34553528]
[1.51328623 22.01129341]
[8.53963661 31.72472000]
[11.09651375 42.64789963]
[9.34832573 52.95093918]
[22.77577400 59.63701248]
[36.20322418 66.32308960]
[49.63067245 73.00916290]
[62.73114014 65.97241974]
[77.63945007 68.02332306]
[88.60972595 78.58298492]
[91.28959656 93.75284576]
[93.12699890 88.46379089]
[97.97201538 83.99016571]
[105.30456543 81.91477203]
[113.83117676 83.46578217]
[121.71241760 89.16479492]
[126.93933105 98.60961914]
[140.36677551 105.29569244]
[149.68302917 97.25604248]
[161.15943909 92.91328430]
[173.39418030 92.77217102]
[184.90162659 96.82580566]
[194.29266357 104.55937195]
[200.44242859 115.01541138]
[202.62503052 126.91230774]
[200.59912109 138.80134583]
[213.35238647 146.69783020]
[226.19438171 138.44885254]
[241.34477234 136.59724426]
[255.79542542 141.51063538]
[266.67715454 152.21347046]
[271.82937622 166.58068848]
[270.22912598 181.75968933]
[262.19412231 194.73666382]
[249.31974792 202.93499756]
[234.16218567 204.72694397]
[219.73098755 199.75668335]
[208.89149475 189.01107788]
[203.79588318 174.62367249]
[205.45590210 159.45109558]
[192.70263672 151.55461121]
[177.37055969 160.84246826]
[159.36552429 161.22534180]
[143.50657654 152.51751709]
[134.07994080 136.97756958]
[133.68070984 118.72314453]
[120.25325775 112.03706360]
[107.50000000 119.93354797]
[107.50000000 134.93354797]
] def
/pairs [
[1 101]
[2 100]
[3 63]
[7 59]
[8 58]
[9 57]
[10 56]
[12 34]
[13 33]
[14 32]
[18 29]
[42 51]
[69 99]
[70 98]
[78 93]
[79 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

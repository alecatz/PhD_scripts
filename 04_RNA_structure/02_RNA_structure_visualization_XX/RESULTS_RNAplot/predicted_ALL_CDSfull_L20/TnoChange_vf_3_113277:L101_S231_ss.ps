%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:49:41 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCGGATAAAGGCGGTGCTCAGCTTTATGTTCCACCAGGGAAATGGCTCACCGGAAGCTTCAATCTCACAAGCCATCTCACTCTCTTCTTGGAGAAAGGAGC\
) def
/coor [
[161.22444153 275.70596313]
[161.22444153 260.70596313]
[142.06050110 242.65325928]
[146.75291443 216.26071167]
[138.08630371 204.01776123]
[124.68189240 205.08047485]
[112.42343140 199.29463196]
[104.59897614 188.09260559]
[103.36643219 174.37493896]
[109.15946960 161.75971985]
[100.87399292 149.25569153]
[92.58851624 136.75164795]
[78.77493286 130.90486145]
[64.03034210 133.66110229]
[51.88686752 143.80244446]
[37.95457458 138.53550720]
[23.20997810 141.29174805]
[18.18112183 155.80403137]
[6.55936909 165.84547424]
[-8.52908802 168.71496582]
[-23.02553177 163.64064026]
[-33.03048706 151.98747253]
[-35.85267639 136.89009094]
[-30.73294258 122.40962982]
[-19.04846954 112.44124603]
[-3.94231892 109.66639709]
[10.52202797 114.83149719]
[20.45373535 126.54715729]
[35.19832993 123.79091644]
[46.28717422 113.84672546]
[61.27409744 118.91651154]
[76.01869202 116.16027069]
[72.71340942 106.19242096]
[73.24755096 96.04832458]
[77.29982758 87.10910034]
[84.08666229 80.50228119]
[92.50000000 76.96033478]
[92.50000000 61.96033478]
[92.50000000 46.96033478]
[79.30548859 39.22391891]
[71.80444336 26.00910950]
[71.92427826 10.91434193]
[79.53267670 -2.00727844]
[92.50000000 -9.33627224]
[92.50000000 -24.33627129]
[92.50000000 -39.33627319]
[92.50000000 -54.33627319]
[80.40541840 -64.24864197]
[77.56279755 -79.62568665]
[85.31433868 -93.20684052]
[100.00000000 -98.57949066]
[114.68566132 -93.20684052]
[122.43720245 -79.62568665]
[119.59458160 -64.24864197]
[107.50000000 -54.33627319]
[107.50000000 -39.33627319]
[107.50000000 -24.33627129]
[107.50000000 -9.33627224]
[120.46732330 -2.00727844]
[128.07571411 10.91434193]
[128.19555664 26.00910950]
[120.69451141 39.22391891]
[107.50000000 46.96033478]
[107.50000000 61.96033478]
[107.50000000 76.96033478]
[117.16438293 81.80831909]
[124.02079773 90.60569000]
[126.51094055 101.82791901]
[123.86771393 113.36578369]
[116.31791687 122.92160034]
[105.09255219 128.46617126]
[113.37802887 140.97021484]
[121.66350555 153.47424316]
[138.48811340 153.93553162]
[151.63217163 164.18170166]
[156.09600830 180.06719971]
[150.32925415 195.35115051]
[158.99586487 207.59410095]
[167.10893250 206.03634644]
[175.29454041 206.87770081]
[182.86100769 210.02819824]
[189.17446899 215.20361328]
[193.71185303 221.95092773]
[196.10426331 229.68800354]
[196.16691589 237.75372314]
[193.91323853 245.46452332]
[189.55216980 252.17234802]
[197.83764648 264.67639160]
[206.12312317 277.18041992]
[221.65965271 280.07730103]
[230.52818298 293.15878296]
[227.46719360 308.66378784]
[214.29269409 317.39352417]
[198.82089233 314.16879272]
[190.23094177 300.90274048]
[193.61909485 285.46588135]
[185.33361816 272.96185303]
[177.04814148 260.45782471]
[176.63726807 260.58511353]
[176.22444153 260.70596313]
[176.22444153 275.70596313]
] def
/pairs [
[1 101]
[2 100]
[4 78]
[5 77]
[10 73]
[11 72]
[12 71]
[13 32]
[14 31]
[16 29]
[17 28]
[37 65]
[38 64]
[39 63]
[44 58]
[45 57]
[46 56]
[47 55]
[87 98]
[88 97]
[89 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

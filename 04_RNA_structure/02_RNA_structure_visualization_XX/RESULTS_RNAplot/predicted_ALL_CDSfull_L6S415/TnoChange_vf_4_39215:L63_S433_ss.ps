%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 17:46:28 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GTCGTCTCCGGTTTCGTCTACGACGTGATTGTCGAGCCTCCAGGTATCGGATCGACACAGGAT\
) def
/coor [
[35.41036606 184.73582458]
[26.47487640 196.78393555]
[17.53938675 208.83206177]
[20.10598564 224.42654419]
[10.82611847 237.21949768]
[-4.79463577 239.62107849]
[-17.48875999 230.20646667]
[-19.72505569 214.56120300]
[-10.17676735 201.96733093]
[5.49127340 199.89656067]
[14.42676353 187.84844971]
[23.36225319 175.80033875]
[20.91770554 165.41078186]
[24.87117386 155.25564575]
[34.06778336 149.00123596]
[45.41376114 149.05859375]
[55.48714447 137.94432068]
[65.56053162 126.83005524]
[75.63391113 115.71578979]
[71.31912994 95.74559784]
[81.24516296 77.88782501]
[74.83183289 64.32798767]
[68.41851044 50.76814651]
[62.00518417 37.20830917]
[55.59185791 23.64846802]
[41.80677032 14.76570892]
[42.87706757 -1.59847414]
[57.70172119 -8.61001301]
[71.03039551 0.94396240]
[69.15169525 17.23514175]
[75.56502533 30.79498100]
[81.97834778 44.35482025]
[88.39167786 57.91466141]
[94.80500031 71.47450256]
[105.65658569 71.56243134]
[115.71578979 75.63391113]
[126.83005524 65.56053162]
[137.94432068 55.48714447]
[142.44299316 39.71710968]
[158.41323853 35.99105072]
[169.42622375 48.14201736]
[164.15275574 63.67013550]
[148.01770020 66.60140991]
[136.90344238 76.67479706]
[125.78917694 86.74817657]
[127.81348419 91.80838776]
[128.85507202 97.15802002]
[128.87715149 102.60807037]
[127.87894440 107.96597290]
[140.74487305 115.67751312]
[156.01269531 111.59474182]
[169.65364075 119.57599640]
[173.57475281 134.88613892]
[165.44972229 148.44192505]
[150.09898376 152.20095825]
[136.62985229 143.93305969]
[133.03332520 128.54344177]
[120.16740417 120.83190155]
[104.25440216 128.68086243]
[86.74817657 125.78917694]
[76.67479706 136.90344238]
[66.60140991 148.01770020]
[56.52802658 159.13197327]
] def
/pairs [
[1 12]
[2 11]
[3 10]
[16 63]
[17 62]
[18 61]
[19 60]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[36 45]
[37 44]
[38 43]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

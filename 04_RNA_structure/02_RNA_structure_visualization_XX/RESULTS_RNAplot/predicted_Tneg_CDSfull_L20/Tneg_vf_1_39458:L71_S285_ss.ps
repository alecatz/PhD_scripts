%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.3
%%CreationDate: Mon Oct 28 18:18:49 2013
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CTATGTTCTCAGGTATTGCAGACCGTATGAGCAAAGAGATCACAGCTCTTGCCCCGAGCAGCATGAAGATT\
) def
/coor [
[87.48097229 106.96055603]
[72.49524689 106.30625916]
[58.37071228 113.43424225]
[45.99304962 105.14914703]
[31.00732803 104.49485779]
[16.02160454 103.84056854]
[1.03588092 103.18627930]
[-13.94984245 102.53199005]
[-22.56792259 116.46641541]
[-36.91184616 124.19034576]
[-53.10356522 123.72080231]
[-66.81774139 115.27593994]
[-74.43717957 101.19197845]
[-89.43717957 101.19197845]
[-99.34955597 113.28656006]
[-114.72660065 116.12918091]
[-128.30775452 108.37763977]
[-133.68040466 93.69197845]
[-128.30775452 79.00631714]
[-114.72660065 71.25477600]
[-99.34955597 74.09739685]
[-89.43717957 86.19197845]
[-74.43717957 86.19197845]
[-68.30160522 73.80460358]
[-57.33319473 65.28185272]
[-43.68332672 62.36904526]
[-30.06159782 65.70383453]
[-19.19794464 74.67774963]
[-13.29555130 87.54626465]
[1.69017172 88.20055389]
[16.67589569 88.85484314]
[31.66161919 89.50914001]
[46.64734268 90.16342926]
[59.69999695 82.98864746]
[73.14953613 91.32054138]
[88.13526154 91.97483063]
[100.62480164 85.68968964]
[112.51902771 93.03944397]
[127.50475311 93.69374084]
[142.49047852 94.34803009]
[157.47619629 95.00231934]
[163.94915771 81.27729034]
[175.15353394 71.10354614]
[189.36102295 66.00835419]
[204.39611816 66.73883057]
[217.96920776 73.15256500]
[228.02528381 84.24403381]
[233.05502319 98.30216217]
[248.04074097 98.95645142]
[257.06890869 96.13943481]
[263.66168213 99.98030090]
[278.60458374 101.28763580]
[291.76907349 92.11833954]
[307.10412598 96.83169556]
[312.84600830 111.81202698]
[304.59005737 125.56770325]
[288.66949463 127.54654694]
[277.29727173 116.23056030]
[262.35433960 114.92322540]
[247.38645935 113.94217682]
[232.40072632 113.28788757]
[226.16488647 126.85414886]
[215.18038940 137.02696228]
[201.09994507 142.23332214]
[186.05841064 141.65061951]
[172.34906006 135.33656311]
[162.07402039 124.22500610]
[156.82191467 109.98804474]
[141.83618164 109.33375549]
[126.85046387 108.67945862]
[111.86473846 108.02516937]
] def
/pairs [
[1 36]
[2 35]
[4 33]
[5 32]
[6 31]
[7 30]
[8 29]
[13 23]
[14 22]
[38 71]
[39 70]
[40 69]
[41 68]
[48 61]
[49 60]
[51 59]
[52 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF

#!/usr/bin/python

#WHAT IS THIS PROGRAM FOR:
#this script computes statistics for RNA secondary structure overlap with several gene features
#for a provided list of genes vs background genes 
#(ex. of background: for a microarray experiment, all genes represented on the microarray).
#the processing is designed to use the RNA structure annotation from Kern&Hupalo 2013 (see input files below);
#the output consists of fold enrichment vs background 
#for different categories of overlap between genes and RNAs,
#plus Fisher's exact test (a.k.a. hypergeometric) p-value 
#(all enrichment statistics are computed from genes/gene features counts, not RNA structure counts!)
#the script allows to pre-filter RNAs to use in the overlap statistics
#by SCORE and LENGTH (for the latter it is possible to specify a range of allowed values)
#(see CONTROL PANEL below)

#================================================

#CONTROL PANEL

SCORE=201		#INCLUSIVE, 50th percentile == 201, 95th percentile == 415	(range: 100-1217)
MINlen=6		#INCLUSIVE, minimum meaningful hairpin size == 6 (=::)		(minimum in set: 3)
MAXlen=1000	#EXCLUSIVE, change together with MINlen to create bins		(maximum in set: 730)

models=	'TAIR10_representative_gene_models.txt'
gff3=		'TAIR10_GFF3_genes.gff'
RNA=		'UCSC_RNAstr_annotation.txt'

#================================================

#load target list (if any provided)

import sys

if len(sys.argv)<2 or len(sys.argv)>3 or (len(sys.argv)==3 and sys.argv[2][-4:]!='.bkg'):
	print
	print 'usage: <0|target list (AGI loci)> <background file (.bkg) (OPTIONAL, ignored if list==0)>'
	print
	print 'NOTE: a valid background file can be generated by this program by omitting background argument'
	print '(i.e. input appropriate background list, then use output as background file for subset list)'
	print
else:
	print
	print '#PROGRESS REPORT'
	print
	list={}
	if sys.argv[1]!='0':
		infile= sys.argv[1] 
		for line in open(infile,'rU').readlines():
			x= line.split()
			if len(x)!=0 and x[0][0]!='#':
				locus= x[0]
				list[locus]=1
				
		Nlist=len(list.keys())
		print '#gene list (AGI loci) loaded'
		
#		outfile= infile[:-4]+'.S'+str(SCORE)+'L'+str(MINlen)+'-'+str(MAXlen)
		if len(sys.argv)==3:
#			outfile+='.out' #file with counts + p-values based on Fisher's test
			FISHER=True
			bkg= sys.argv[2]
		else:
			FISHER=False
#			outfile+='.bkg' #background file with counts only
	else:
		FISHER=False
#		outfile= 'genomic.S'+str(SCORE)+'L'+str(MINlen)+'-'+str(MAXlen)+'.bkg'
		
#================================================

#load background file (if any provided) - see output for dictionary entries names
	
	if FISHER:
		BKG={}
		for line in open(bkg,'rU').readlines():
			x= line.split()
			if len(x)!=0 and x[0][0]!='#':
				BKG[x[0]]=int(x[1]) #var : value
				if len(x)==3:
					BKG[x[0]+'F']=int(x[2])
					
		print '#background loaded'

#================================================

#load representative gene models

	MOD={}
	for line in open(models,'rU').readlines()[3:]:
		x=line.split()
		if len(x)>0:
			locus= x[0].split('.')
			if list=={} or list.get(locus[0],0)!=0:
				MOD[locus[0]]=locus[1] #locus AGI code + representative model
			
	print '#representative models loaded'
	Nloci= len(MOD.keys()) 
	if list!={} and Nloci<Nlist:
		print
		print '***WARNING:',Nlist-Nloci,'provided loci with MISSING MODEL (excluded from further analyses):***'
		for locus in list.keys():
			if MOD.get(locus,0)==0:
				print locus
		print
						
#================================================

#load RNA coordinates

	RNAcoord={}
	UNIQ={}
	for line in open(RNA,'rU').readlines()[1:]:
		x= line.split()
		#NOTES: 
		# - no strand info necessary since all on +
		# - coordinates starting at 0, +1 to allow comparison to gff annotation (coord.s starting at 1)
		chr,start,stop,name,score,L=x[1][3:],int(x[2])+1,int(x[3])+1,x[4],int(x[5]),int(x[7])
		if score>=SCORE and L>=MINlen and L<MAXlen:
			coord=(chr,start,stop,name)
			UNIQ[(chr,start,stop)]=1
			RNAcoord[coord]= RNAcoord.get(coord,[])+[(score,L)]
		
	Rsort=RNAcoord.keys()
	Rsort.sort()
	Nrna= len(Rsort)
	Nuniq=len(UNIQ.keys())
	
	print '#RNA coords. loaded'

#================================================

#load gene features

	Gall,Pall,TEall,miRall,snRall,snoRall,tRall,rRall,ncRall=0,0,0,0,0,0,0,0,0
	UTR5genes,UTR3genes={},{}

	GENE={}				#coord. : model
	Gsort=[]				#sorted list of coordinates
	Gtype,Gfeat={},{}	#model : type, model: features coordinates (protein-coding only)

	for line in open(gff3,'rU').readlines()[1:]:
		x=line.split()
		feat=x[2]
		if feat in ['gene','pseudogene','transposable_element_gene']:
			READ=False
			locus=x[8].split(';')[0][3:]
			if MOD.get(locus,0)==0:
				continue
			else:
				model=locus+'.'+MOD[locus] #right model
				chr,start,stop,strand=x[0][3:],int(x[3]),int(x[4]),x[6]
				GENE[(chr,start,stop,strand)]=model
				Gtype[model]=feat
				if feat=='pseudogene':
					Pall+=1
				elif feat=='transposable_element_gene':
					TEall+=1
				else: #gene
					type= x[8].split(';')[1][5:] #protein_coding_gene,other_RNA,snoRNA,snRNA,miRNA,tRNA,rRNA
					Gtype[model]=type
					if type=='protein_coding_gene':
						READ=True
						Gall+=1
					elif type=='rRNA':
						rRall+=1
					elif type=='miRNA':
						miRall+=1
					elif type=='snRNA':
						snRall+=1
					elif type=='snoRNA':
						snoRall+=1
					elif type=='tRNA':
						tRall+=1
					else: #other_RNA
						ncRall+=1
		elif READ==True and feat in ['CDS','five_prime_UTR','three_prime_UTR','exon']:
				locus=x[8].split('=')[1].split(',')[0].split()[0] #removes \n
				if locus!=model:
					continue
				else:
					start,stop=int(x[3]),int(x[4])
					Gfeat[model]=Gfeat.get(model,[])+[(start,stop,feat)]
					if feat=='five_prime_UTR':
						UTR5genes[model]=1
					elif feat=='three_prime_UTR':
						UTR3genes[model]=1
	
	UTR5all,UTR3all=len(UTR5genes.keys()),len(UTR3genes.keys())

	Gsort=GENE.keys()
	Gsort.sort()
	for model in Gfeat.keys(): #tested: not necessary because features already sorted in ggf3 file
 		Fsort=Gfeat[model]
 		Fsort.sort()
 		Gfeat[model]=Fsort
	
	print '#GFF3 loaded'

#================================================

#check overlap between selected models and RNA structures
#(stores data that can be printed later on)

	OVERLAP={}	#gene coord. : RNA coord. (any degree of overlap)
	FULL={}		#gene coord. : RNA coord. (RNA fully contained in gene limits)
	SCAN=0
	CHR=Rsort[0][0] #initial reference chromosome for RNAs
	for R in Rsort:
		FIRST=True
		chr,start,stop=R[0],R[1],R[2]
		for i in range(SCAN,len(Gsort)):
			gene=Gsort[i]
			chr2,start2,stop2,strand2=gene[0],gene[1],gene[2],gene[3] #strand in case of filtering needed
			#print CHR,R,gene
			if chr!=chr2: 
				if chr==CHR: #new gene chromosome
					SCAN=i #keep same gene, go on with RNAs
					break
				else: #new RNA chromosome, go on with genes
					continue
			else:
				if CHR!=chr:
					CHR=chr	#update reference RNA chromosome (new chromosome)
					SCAN=i	#start scanning from 1st gene of new chromosome
				if (start<=start2 and stop>=start2) or (start>=start2 and start<=stop2):
					if FIRST==True:
						SCAN=i
					FIRST=False
					OVERLAP[gene]=OVERLAP.get(gene,[])+[R]
					if start>=start2 and stop<=stop2:
						FULL[gene]=FULL.get(gene,[])+[R]
				elif stop<start2:	#RNA ends before gene, meaningless to increment genes (check next RNA)
					if FIRST:
						SCAN=i
					break
				else: #RNA starts after gene, so might overlap with the next (check next gene)
					continue
	
	print '#OVERLAP done (general)'
				
	OVsort=OVERLAP.keys()
	OVsort.sort()
	Fsort=FULL.keys()
	Fsort.sort()

#================================================

#extracts overlap statistics (gene counts)

	G,P,TE,miR,snR,snoR,tR,rR,ncR=0,0,0,0,0,0,0,0,0				#gene categories (any degree of overlap)
	Gf,Pf,TEf,miRf,snRf,snoRf,tRf,rRf,ncRf=0,0,0,0,0,0,0,0,0	#gene categories (>=1 RNA fully contained in gene limits)			
	c5,c3,cCDS,cEX=0,0,0,0		#protein-coding gene features (any degree of overlap)
	c5f,c3f,cCDSf,cEXf=0,0,0,0	#protein-coding gene features (>=1 RNA fully contained in CDS or EXON)
	for gene in OVsort:
		model=GENE[gene]
		type= Gtype[model]
		if type!='protein_coding_gene':
			if type=='pseudogene':
				P+=1
				if FULL.get(gene,0)!=0:
					Pf+=1
			elif type=='transposable_element_gene':
				TE+=1
				if FULL.get(gene,0)!=0:
					TEf+=1
			elif type=='rRNA':
				rR+=1
				if FULL.get(gene,0)!=0:
					rRf+=1
			elif type=='miRNA':
				miR+=1
				if FULL.get(gene,0)!=0:
					miRf+=1
			elif type=='snRNA':
				snR+=1
				if FULL.get(gene,0)!=0:
					snRf+=1
			elif type=='snoRNA':
				snoR+=1
				if FULL.get(gene,0)!=0:
					snoRf+=1	
			elif type=='tRNA':
				tR+=1
				if FULL.get(gene,0)!=0:
					tRf+=1		
			else: #other_RNA
				ncR+=1
				if FULL.get(gene,0)!=0:
					ncRf+=1					
		else: #protein_coding_gene
			G+=1
			if FULL.get(gene,0)!=0:
				Gf+=1
			for R in OVERLAP[gene]:
				start,stop=R[1],R[2]
				UTR5x,UTR3x,CDSx,exonx=False,False,False,False
				UTR5xf,UTR3xf,CDSxf,exonxf=False,False,False,False
				for feat in Gfeat[model]:
					start2,stop2,what=feat[0],feat[1],feat[2]
					if (start<=start2 and stop>=start2) or (start>=start2 and start<=stop2):
						if what=='five_prime_UTR':
							UTR5x=True
							if start>=start2 and stop<=stop2:
								UTR5xf=True
						elif what=='three_prime_UTR':
							UTR3x=True
							if start>=start2 and stop<=stop2:
								UTR3xf=True
						elif what=='CDS':
							CDSx=True
							if start>=start2 and stop<=stop2:
								CDSxf=True
						else: #exon
							exonx=True
							if start>=start2 and stop<=stop2:
								exonxf=True
			if exonx:
				cEX+=1
				if exonxf:
					cEXf+=1
				if UTR5x:
					c5+=1
					if UTR5xf:
						c5f+=1
				if UTR3x:
					c3+=1
					if UTR3xf:
						c3f+=1
				if CDSx:
					cCDS+=1
					if CDSxf:
						cCDSf+=1

	print '#OVERLAP done (protein-coding genes)'
	
#================================================

	#computes Fisher exact test calling R (if background file provided)

	if FISHER:
	
		import subprocess as sub
		sub.PIPE=1
	
		#N == tot. genes in background
		#K == tot. genes in background with annotation X
		#n == genes in list
		#k == genes in list with annotation X
			
		def FoldFisher(N,K,n,k):
			if k==0 or n==0 or K==0 or N==0:
				x,pval= '-','-'
			else:
				x= '%1.2f' % ((float(k)/float(n))/(float(K)/float(N)))
				y=sub.Popen('Rscript Fisher.R '+str(N)+' '+str(K)+' '+str(n)+' '+str(k), shell=True, stdout=1)
				pval='%1.2e' % float(y.communicate()[0])
			return (x,pval)
	
		FoldEn={}	#fold enrichment + Fisher's exact test (hypergeometric) p-value

		FoldEn['allGpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_protein-coding'],Nloci,Gall)
		FoldEn['all5pval']= FoldFisher(BKG['all_protein-coding'],BKG['all_5UTRgene'],Gall,UTR5all)
		FoldEn['all3pval']= FoldFisher(BKG['all_protein-coding'],BKG['all_3UTRgene'],Gall,UTR3all)
		FoldEn['allPpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_pseudogene'],Nloci,Pall)
		FoldEn['allTEpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_TrEl'],Nloci,TEall)
		FoldEn['allmiRpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_miRNA'],Nloci,miRall)
		FoldEn['allsnRpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_snRNA'],Nloci,snRall)
		FoldEn['allsnoRpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_snoRNA'],Nloci,snoRall)
		FoldEn['alltRpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_tRNA'],Nloci,tRall)
		FoldEn['allrRpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_rRNA'],Nloci,rRall)
		FoldEn['allncRpval']= FoldFisher(BKG['ALL_GENES'],BKG['all_other_non-coding'],Nloci,ncRall)
		FoldEn['Gpval']= FoldFisher(BKG['all_protein-coding'],BKG['protein-coding'],Gall,G)
		FoldEn['Gfpval']= FoldFisher(BKG['all_protein-coding'],BKG['protein-codingF'],Gall,Gf)
		FoldEn['Ppval']= FoldFisher(BKG['all_pseudogene'],BKG['pseudogene'],Pall,P)
		FoldEn['Pfpval']= FoldFisher(BKG['all_pseudogene'],BKG['pseudogeneF'],Pall,Pf)
		FoldEn['TEpval']= FoldFisher(BKG['all_TrEl'],BKG['TrEl'],TEall,TE)
		FoldEn['TEfpval']= FoldFisher(BKG['all_TrEl'],BKG['TrElF'],TEall,TEf)
		FoldEn['miRpval']= FoldFisher(BKG['all_miRNA'],BKG['miRNA'],miRall,miR)
		FoldEn['miRfpval']= FoldFisher(BKG['all_miRNA'],BKG['miRNAF'],miRall,miRf)
		FoldEn['snRpval']= FoldFisher(BKG['all_snRNA'],BKG['snRNA'],snRall,snR)
		FoldEn['snRfpval']= FoldFisher(BKG['all_snRNA'],BKG['snRNAF'],snRall,snRf)
		FoldEn['snoRpval']= FoldFisher(BKG['all_snoRNA'],BKG['snoRNA'],snoRall,snoR)
		FoldEn['snoRfpval']= FoldFisher(BKG['all_snoRNA'],BKG['snoRNAF'],snoRall,snoRf)
		FoldEn['tRpval']= FoldFisher(BKG['all_tRNA'],BKG['tRNA'],tRall,tR)
		FoldEn['tRfpval']= FoldFisher(BKG['all_tRNA'],BKG['tRNAF'],tRall,tRf)
		FoldEn['rRpval']= FoldFisher(BKG['all_rRNA'],BKG['rRNA'],rRall,rR)
		FoldEn['rRfpval']= FoldFisher(BKG['all_rRNA'],BKG['rRNAF'],rRall,rRf)
		FoldEn['ncRpval']= FoldFisher(BKG['all_other_non-coding'],BKG['other_non-coding'],ncRall,ncR)
		FoldEn['ncRfpval']= FoldFisher(BKG['all_other_non-coding'],BKG['other_non-codingF'],ncRall,ncRf)
		FoldEn['5pval']= FoldFisher(BKG['all_5UTRgene'],BKG['5UTR'],UTR5all,c5)
		FoldEn['5fpval']= FoldFisher(BKG['all_5UTRgene'],BKG['5UTRF'],UTR5all,c5f)
		FoldEn['3pval']= FoldFisher(BKG['all_3UTRgene'],BKG['3UTR'],UTR3all,c3)
		FoldEn['3fpval']= FoldFisher(BKG['all_3UTRgene'],BKG['3UTRF'],UTR3all,c3f)
		FoldEn['CDSpval']= FoldFisher(BKG['all_protein-coding'],BKG['CDS'],Gall,cCDS)
		FoldEn['CDSfpval']= FoldFisher(BKG['all_protein-coding'],BKG['CDSF'],Gall,cCDSf)
		FoldEn['EXpval']= FoldFisher(BKG['all_protein-coding'],BKG['exon'],Gall,cEX)
		FoldEn['EXfpval']= FoldFisher(BKG['all_protein-coding'],BKG['exonF'],Gall,cEXf)

		print '#FOLD-ENRICHMENT + FISHER TEST for p-value done'
	
#================================================

#output file (counts + p-values, if background given)

	print 
	print '################################################'
	print
	print '#INPUT FILES'
	print 
	print '#INPUT LIST:\t',
	if list!={}:
		print infile
	else:
		print '-'
	print '#BACKGROUND:\t',
	if FISHER:
		print bkg
	else:
		print '-'
	print
	print '#TAIR MODELS:\t',models
	print '#GFF3 ANNOT.:\t',gff3
	print '#RNA ANNOT.:\t',RNA
	print
	print '################################################'
	print
	print '#FILTERING OPTIONS (RNAs)'
	print 
	print '#min SCORE:\t',SCORE
	print '#MIN length:\t',MINlen
	print '#MAX length:\t',MAXlen
	print 
	print '################################################'
	print
	print '#GENERAL STATISTICS'
	print
	print '#N RNA structures passing filtering:\t',Nrna
	print '#(N unique coordinates passing filtering):\t',Nuniq
	print 
	print '#N genes with mapped model:\t',Nloci
	print '#(original N genes from list):\t',
	if list!={}:
		print Nlist
	else:
		print '-'
	print 
	if not FISHER:
		print '#N genes'
		print 'ALL_GENES\t',Gall+Pall+TEall+miRall+snRall+snoRall+tRall+rRall+ncRall
		print 'all_protein-coding\t',Gall
		print 'all_5UTRgene\t',UTR5all
		print 'all_3UTRgene\t',UTR3all
		print 'all_pseudogene\t',Pall
		print 'all_TrEl\t',TEall
		print 'all_miRNA\t',miRall
		print 'all_snRNA\t',snRall
		print 'all_snoRNA\t',snoRall
		print 'all_tRNA\t',tRall
		print 'all_rRNA\t',rRall
		print 'all_other_non-coding\t',ncRall
		print
		print '#N genes with RNA structure overlap (RNA partially/FULLY contained in gene limits)'
		print 'protein-coding\t',G,'\t',Gf
		print 'pseudogene\t',P,'\t',Pf
		print 'TrEl\t',TE,'\t',TEf
		print 'miRNA\t',miR,'\t',miRf
		print 'snRNA\t',snR,'\t',snRf
		print 'snoRNA\t',snoR,'\t',snoRf
		print 'tRNA\t',tR,'\t',tRf
		print 'rRNA\t',rR,'\t',rRf
		print 'other_non-coding\t',ncR,'\t',ncRf
		print 
		print '#N protein-coding genes with RNA structure overlapping exon feature (RNA partially/FULLY contained in feature limits)'
		print '5UTR\t',c5,'\t',c5f
		print '3UTR\t',c3,'\t',c3f
		print 'CDS\t',cCDS,'\t',cCDSf
		print 'exon\t',cEX,'\t',cEXf
		print
	else:		
		print '#N genes (list vs background)'
		print 'all_protein-coding\t',Gall,'\t',BKG['all_protein-coding'],'\t',FoldEn['allGpval'][0],'\t',FoldEn['allGpval'][1]
		print 'all_5UTRgene\t',UTR5all,'\t',BKG['all_5UTRgene'],'\t',FoldEn['all5pval'][0],'\t',FoldEn['all5pval'][1]
		print 'all_3UTRgene\t',UTR3all,'\t',BKG['all_3UTRgene'],'\t',FoldEn['all3pval'][0],'\t',FoldEn['all3pval'][1]
		print 'all_pseudogene\t',Pall,'\t',BKG['all_pseudogene'],'\t',FoldEn['allPpval'][0],'\t',FoldEn['allPpval'][1]
		print 'all_TrEl\t',TEall,'\t',BKG['all_TrEl'],'\t',FoldEn['allTEpval'][0],'\t',FoldEn['allTEpval'][1]
		print 'all_miRNA\t',miRall,'\t',BKG['all_miRNA'],'\t',FoldEn['allmiRpval'][0],'\t',FoldEn['allmiRpval'][1]
		print 'all_snRNA\t',snRall,'\t',BKG['all_snRNA'],'\t',FoldEn['allsnRpval'][0],'\t',FoldEn['allsnRpval'][1]
		print 'all_snoRNA\t',snoRall,'\t',BKG['all_snoRNA'],'\t',FoldEn['allsnoRpval'][0],'\t',FoldEn['allsnoRpval'][1]
		print 'all_tRNA\t',tRall,'\t',BKG['all_tRNA'],'\t',FoldEn['alltRpval'][0],'\t',FoldEn['alltRpval'][1]
		print 'all_rRNA\t',rRall,'\t',BKG['all_rRNA'],'\t',FoldEn['allrRpval'][0],'\t',FoldEn['allrRpval'][1]
		print 'all_other_non-coding\t',ncRall,'\t',BKG['all_other_non-coding'],'\t',FoldEn['allncRpval'][0],'\t',FoldEn['allncRpval'][1]
		print
		print '#OVERLAP STATISTICS, LIST vs BACKGROUND + FOLD ENRICHMENT + FISHER P-VALUE (HYPERGEOMETRIC TEST)'
		print
		print '#N genes with RNA structure overlap (RNA partially contained in gene limits)'
		print 'protein-coding\t',G,'\t',BKG['protein-coding'],'\t',FoldEn['Gpval'][0],'\t',FoldEn['Gpval'][1]
		print 'pseudogene\t',P,'\t',BKG['pseudogene'],'\t',FoldEn['Ppval'][0],'\t',FoldEn['Ppval'][1]
		print 'TrEl\t',TE,'\t',BKG['TrEl'],'\t',FoldEn['TEpval'][0],'\t',FoldEn['TEpval'][1]
		print 'miRNA\t',miR,'\t',BKG['miRNA'],'\t',FoldEn['miRpval'][0],'\t',FoldEn['miRpval'][1]
		print 'snRNA\t',snR,'\t',BKG['snRNA'],'\t',FoldEn['snRpval'][0],'\t',FoldEn['snRpval'][1]
		print 'snoRNA\t',snoR,'\t',BKG['snoRNA'],'\t',FoldEn['snoRpval'][0],'\t',FoldEn['snoRpval'][1]
		print 'tRNA\t',tR,'\t',BKG['tRNA'],'\t',FoldEn['tRpval'][0],'\t',FoldEn['tRpval'][1]
		print 'rRNA\t',rR,'\t',BKG['rRNA'],'\t',FoldEn['rRpval'][0],'\t',FoldEn['rRpval'][1]
		print 'other_non-coding\t',ncR,'\t',BKG['other_non-coding'],'\t',FoldEn['ncRpval'][0],'\t',FoldEn['ncRpval'][1]
		print
		print '#N genes with RNA structure overlap (RNA FULLY contained in gene limits)'
		print 'protein-coding\t',Gf,'\t',BKG['protein-codingF'],'\t',FoldEn['Gfpval'][0],'\t',FoldEn['Gfpval'][1]
		print 'pseudogene\t',Pf,'\t',BKG['pseudogeneF'],'\t',FoldEn['Pfpval'][0],'\t',FoldEn['Pfpval'][1]
		print 'TrEl\t',TEf,'\t',BKG['TrElF'],'\t',FoldEn['TEfpval'][0],'\t',FoldEn['TEfpval'][1]
		print 'miRNA\t',miRf,'\t',BKG['miRNAF'],'\t',FoldEn['miRfpval'][0],'\t',FoldEn['miRfpval'][1]
		print 'snRNA\t',snRf,'\t',BKG['snRNAF'],'\t',FoldEn['snRfpval'][0],'\t',FoldEn['snRfpval'][1]
		print 'snoRNA\t',snoRf,'\t',BKG['snoRNAF'],'\t',FoldEn['snoRfpval'][0],'\t',FoldEn['snoRfpval'][1]
		print 'tRNA\t',tRf,'\t',BKG['tRNAF'],'\t',FoldEn['tRfpval'][0],'\t',FoldEn['tRfpval'][1]
		print 'rRNA\t',rRf,'\t',BKG['rRNAF'],'\t',FoldEn['rRfpval'][0],'\t',FoldEn['rRfpval'][1]
		print 'other_non-coding\t',ncRf,'\t',BKG['other_non-codingF'],'\t',FoldEn['ncRfpval'][0],'\t',FoldEn['ncRfpval'][1]
		print 
		print '#N protein-coding genes with RNA structure overlapping exon feature (partial overlap)'
		print '5UTR\t',c5,'\t',BKG['5UTR'],'\t',FoldEn['5pval'][0],'\t',FoldEn['5pval'][1]
		print '3UTR\t',c3,'\t',BKG['3UTR'],'\t',FoldEn['3pval'][0],'\t',FoldEn['3pval'][1]
		print 'CDS\t',cCDS,'\t',BKG['CDS'],'\t',FoldEn['CDSpval'][0],'\t',FoldEn['CDSpval'][1]
		print 'exon\t',cEX,'\t',BKG['exon'],'\t',FoldEn['EXpval'][0],'\t',FoldEn['EXpval'][1]
		print
		print '#N protein-coding genes with RNA structure overlapping exon feature (FULL overlap)'
		print '5UTR\t',c5f,'\t',BKG['5UTRF'],'\t',FoldEn['5fpval'][0],'\t',FoldEn['5fpval'][1]
		print '3UTR\t',c3f,'\t',BKG['3UTRF'],'\t',FoldEn['3fpval'][0],'\t',FoldEn['3fpval'][1]
		print 'CDS\t',cCDSf,'\t',BKG['CDSF'],'\t',FoldEn['CDSfpval'][0],'\t',FoldEn['CDSfpval'][1]
		print 'exon\t',cEXf,'\t',BKG['exonF'],'\t',FoldEn['EXfpval'][0],'\t',FoldEn['EXfpval'][1]
		print
		print '***WARNING: YOU CANNOT USE THIS AS BACKGROUND FILE!***'
		print